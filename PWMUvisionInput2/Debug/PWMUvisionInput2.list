
PWMUvisionInput2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009970  08009970  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009978  08009978  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009978  08009978  00019978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800997c  0800997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008bc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000094c  2000094c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b869  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ecc  00000000  00000000  0003b929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0003f7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001578  00000000  00000000  00040f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247ed  00000000  00000000  00042488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d938  00000000  00000000  00066c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3eab  00000000  00000000  000845ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158458  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006418  00000000  00000000  001584a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009934 	.word	0x08009934

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009934 	.word	0x08009934

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim ){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	7f1b      	ldrb	r3, [r3, #28]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d124      	bne.n	8000526 <HAL_TIM_IC_CaptureCallback+0x5a>

		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80004dc:	2100      	movs	r1, #0
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f005 f9f4 	bl	80058cc <HAL_TIM_ReadCapturedValue>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <HAL_TIM_IC_CaptureCallback+0x64>)
 80004e8:	6013      	str	r3, [r2, #0]
		if(ICValue != 0 ){
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <HAL_TIM_IC_CaptureCallback+0x64>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d019      	beq.n	8000526 <HAL_TIM_IC_CaptureCallback+0x5a>
			Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1))*100/ICValue;
 80004f2:	2100      	movs	r1, #0
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f005 f9e9 	bl	80058cc <HAL_TIM_ReadCapturedValue>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2264      	movs	r2, #100	; 0x64
 80004fe:	fb03 f202 	mul.w	r2, r3, r2
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	fbb2 f3f3 	udiv	r3, r2, r3
 800050a:	ee07 3a90 	vmov	s15, r3
 800050e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000514:	edc3 7a00 	vstr	s15, [r3]

			Frequency = 84000000/ICValue;
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_TIM_IC_CaptureCallback+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000524:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000ac 	.word	0x200000ac
 8000534:	200000b4 	.word	0x200000b4
 8000538:	0501bd00 	.word	0x0501bd00
 800053c:	200000b0 	.word	0x200000b0

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fd7c 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f81c 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f9de 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 f9bc 	bl	80008cc <MX_DMA_Init>
  MX_I2C1_Init();
 8000554:	f000 f88a 	bl	800066c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000558:	f000 f8b6 	bl	80006c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800055c:	f000 f8e4 	bl	8000728 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000560:	f000 f918 	bl	8000794 <MX_TIM2_Init>
  MX_USB_HOST_Init();
 8000564:	f008 fd9e 	bl	80090a4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000568:	2100      	movs	r1, #0
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <main+0x40>)
 800056c:	f004 fdd8 	bl	8005120 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000570:	2104      	movs	r1, #4
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <main+0x40>)
 8000574:	f004 fcf8 	bl	8004f68 <HAL_TIM_IC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000578:	f008 fdba 	bl	80090f0 <MX_USB_HOST_Process>
 800057c:	e7fc      	b.n	8000578 <main+0x38>
 800057e:	bf00      	nop
 8000580:	200001ac 	.word	0x200001ac

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f009 f8c8 	bl	8009728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <SystemClock_Config+0xe0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a2c      	ldr	r2, [pc, #176]	; (8000664 <SystemClock_Config+0xe0>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <SystemClock_Config+0xe0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <SystemClock_Config+0xe4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a26      	ldr	r2, [pc, #152]	; (8000668 <SystemClock_Config+0xe4>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <SystemClock_Config+0xe4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005e0:	2303      	movs	r3, #3
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ea:	2301      	movs	r3, #1
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fd4a 	bl	80040ac <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800061e:	f000 fa83 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2105      	movs	r1, #5
 8000640:	4618      	mov	r0, r3
 8000642:	f003 ffab 	bl	800459c <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800064c:	f000 fa6c 	bl	8000b28 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f004 f887 	bl	8004768 <HAL_RCC_MCOConfig>
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f002 ff1b 	bl	80034e4 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 fa38 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000b8 	.word	0x200000b8
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_I2S3_Init+0x54>)
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <MX_I2S3_Init+0x58>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2S3_Init+0x54>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_I2S3_Init+0x54>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2S3_Init+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_I2S3_Init+0x54>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_I2S3_Init+0x54>)
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <MX_I2S3_Init+0x5c>)
 80006f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_I2S3_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_I2S3_Init+0x54>)
 8000708:	f003 f830 	bl	800376c <HAL_I2S_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000712:	f000 fa09 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000010c 	.word	0x2000010c
 8000720:	40003c00 	.word	0x40003c00
 8000724:	00017700 	.word	0x00017700

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI1_Init+0x64>)
 800077a:	f004 fac3 	bl	8004d04 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f9d0 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000154 	.word	0x20000154
 8000790:	40013000 	.word	0x40013000

08000794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b090      	sub	sp, #64	; 0x40
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ce:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <MX_TIM2_Init+0x134>)
 80007d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007d6:	4b3c      	ldr	r3, [pc, #240]	; (80008c8 <MX_TIM2_Init+0x134>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <MX_TIM2_Init+0x134>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <MX_TIM2_Init+0x134>)
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295
 80007e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_TIM2_Init+0x134>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <MX_TIM2_Init+0x134>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f6:	4834      	ldr	r0, [pc, #208]	; (80008c8 <MX_TIM2_Init+0x134>)
 80007f8:	f004 fb0d 	bl	8004e16 <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000802:	f000 f991 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000810:	4619      	mov	r1, r3
 8000812:	482d      	ldr	r0, [pc, #180]	; (80008c8 <MX_TIM2_Init+0x134>)
 8000814:	f004 ff50 	bl	80056b8 <HAL_TIM_ConfigClockSource>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800081e:	f000 f983 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000822:	4829      	ldr	r0, [pc, #164]	; (80008c8 <MX_TIM2_Init+0x134>)
 8000824:	f004 fb46 	bl	8004eb4 <HAL_TIM_IC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800082e:	f000 f97b 	bl	8000b28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000832:	2304      	movs	r3, #4
 8000834:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000836:	2350      	movs	r3, #80	; 0x50
 8000838:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	481e      	ldr	r0, [pc, #120]	; (80008c8 <MX_TIM2_Init+0x134>)
 800084e:	f004 fffa 	bl	8005846 <HAL_TIM_SlaveConfigSynchro>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000858:	f000 f966 	bl	8000b28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_TIM2_Init+0x134>)
 8000876:	f004 fe83 	bl	8005580 <HAL_TIM_IC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000880:	f000 f952 	bl	8000b28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000884:	2302      	movs	r3, #2
 8000886:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000888:	2302      	movs	r3, #2
 800088a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2204      	movs	r2, #4
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_TIM2_Init+0x134>)
 8000896:	f004 fe73 	bl	8005580 <HAL_TIM_IC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80008a0:	f000 f942 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_TIM2_Init+0x134>)
 80008b2:	f005 fb93 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 80008bc:	f000 f934 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3740      	adds	r7, #64	; 0x40
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001ac 	.word	0x200001ac

080008cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_DMA_Init+0x3c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <MX_DMA_Init+0x3c>)
 80008dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_DMA_Init+0x3c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2010      	movs	r0, #16
 80008f4:	f000 fd15 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008f8:	2010      	movs	r0, #16
 80008fa:	f000 fd2e 	bl	800135a <HAL_NVIC_EnableIRQ>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b7a      	ldr	r3, [pc, #488]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a79      	ldr	r2, [pc, #484]	; (8000b10 <MX_GPIO_Init+0x204>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b77      	ldr	r3, [pc, #476]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b73      	ldr	r3, [pc, #460]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a72      	ldr	r2, [pc, #456]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b70      	ldr	r3, [pc, #448]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b6c      	ldr	r3, [pc, #432]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a6b      	ldr	r2, [pc, #428]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b69      	ldr	r3, [pc, #420]	; (8000b10 <MX_GPIO_Init+0x204>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b65      	ldr	r3, [pc, #404]	; (8000b10 <MX_GPIO_Init+0x204>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a64      	ldr	r2, [pc, #400]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b62      	ldr	r3, [pc, #392]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b5e      	ldr	r3, [pc, #376]	; (8000b10 <MX_GPIO_Init+0x204>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a5d      	ldr	r2, [pc, #372]	; (8000b10 <MX_GPIO_Init+0x204>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b5b      	ldr	r3, [pc, #364]	; (8000b10 <MX_GPIO_Init+0x204>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b57      	ldr	r3, [pc, #348]	; (8000b10 <MX_GPIO_Init+0x204>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a56      	ldr	r2, [pc, #344]	; (8000b10 <MX_GPIO_Init+0x204>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <MX_GPIO_Init+0x204>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2108      	movs	r1, #8
 80009ce:	4851      	ldr	r0, [pc, #324]	; (8000b14 <MX_GPIO_Init+0x208>)
 80009d0:	f001 f964 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	484f      	ldr	r0, [pc, #316]	; (8000b18 <MX_GPIO_Init+0x20c>)
 80009da:	f001 f95f 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009de:	2200      	movs	r2, #0
 80009e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009e4:	484d      	ldr	r0, [pc, #308]	; (8000b1c <MX_GPIO_Init+0x210>)
 80009e6:	f001 f959 	bl	8001c9c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ea:	2308      	movs	r3, #8
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4844      	ldr	r0, [pc, #272]	; (8000b14 <MX_GPIO_Init+0x208>)
 8000a02:	f000 ffaf 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	483e      	ldr	r0, [pc, #248]	; (8000b18 <MX_GPIO_Init+0x20c>)
 8000a1e:	f000 ffa1 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a22:	2308      	movs	r3, #8
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a32:	2305      	movs	r3, #5
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4836      	ldr	r0, [pc, #216]	; (8000b18 <MX_GPIO_Init+0x20c>)
 8000a3e:	f000 ff91 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a46:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4832      	ldr	r0, [pc, #200]	; (8000b20 <MX_GPIO_Init+0x214>)
 8000a58:	f000 ff84 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	482d      	ldr	r0, [pc, #180]	; (8000b24 <MX_GPIO_Init+0x218>)
 8000a70:	f000 ff78 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a86:	2305      	movs	r3, #5
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4824      	ldr	r0, [pc, #144]	; (8000b24 <MX_GPIO_Init+0x218>)
 8000a92:	f000 ff67 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a96:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a9a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	481b      	ldr	r0, [pc, #108]	; (8000b1c <MX_GPIO_Init+0x210>)
 8000ab0:	f000 ff58 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <MX_GPIO_Init+0x214>)
 8000ad2:	f000 ff47 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_GPIO_Init+0x210>)
 8000aea:	f000 ff3b 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000af2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_GPIO_Init+0x208>)
 8000b04:	f000 ff2e 	bl	8001964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b08:	bf00      	nop
 8000b0a:	3730      	adds	r7, #48	; 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_MspInit+0x5c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b72:	2007      	movs	r0, #7
 8000b74:	f000 fbca 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2005      	movs	r0, #5
 8000b7e:	f000 fbd0 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b82:	2005      	movs	r0, #5
 8000b84:	f000 fbe9 	bl	800135a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_I2C_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12c      	bne.n	8000c10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bd2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd8:	2312      	movs	r3, #18
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be4:	2304      	movs	r3, #4
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <HAL_I2C_MspInit+0x8c>)
 8000bf0:	f000 feb8 	bl	8001964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	; 0x38
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a31      	ldr	r2, [pc, #196]	; (8000d14 <HAL_I2S_MspInit+0xf0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d15a      	bne.n	8000d0a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c58:	23c0      	movs	r3, #192	; 0xc0
 8000c5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 ff0d 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c70:	f7ff ff5a 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <HAL_I2S_MspInit+0xf8>)
 8000ce4:	f000 fe3e 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ce8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <HAL_I2S_MspInit+0xfc>)
 8000d06:	f000 fe2d 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3738      	adds	r7, #56	; 0x38
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40003c00 	.word	0x40003c00
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	40020800 	.word	0x40020800

08000d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_SPI_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12b      	bne.n	8000d9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_SPI_MspInit+0x88>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <HAL_SPI_MspInit+0x88>)
 8000d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_SPI_MspInit+0x88>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_SPI_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_SPI_MspInit+0x88>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_SPI_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d7e:	23e0      	movs	r3, #224	; 0xe0
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_SPI_MspInit+0x8c>)
 8000d9a:	f000 fde3 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40013000 	.word	0x40013000
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd4:	d166      	bne.n	8000ea4 <HAL_TIM_Base_MspInit+0xf0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <HAL_TIM_Base_MspInit+0xf8>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a33      	ldr	r2, [pc, #204]	; (8000eac <HAL_TIM_Base_MspInit+0xf8>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <HAL_TIM_Base_MspInit+0xf8>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_TIM_Base_MspInit+0xf8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a2c      	ldr	r2, [pc, #176]	; (8000eac <HAL_TIM_Base_MspInit+0xf8>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <HAL_TIM_Base_MspInit+0xf8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e20:	2301      	movs	r3, #1
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <HAL_TIM_Base_MspInit+0xfc>)
 8000e2c:	f000 fd9a 	bl	8001964 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e32:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <HAL_TIM_Base_MspInit+0x104>)
 8000e34:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e38:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e3c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e40:	2240      	movs	r2, #64	; 0x40
 8000e42:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e52:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e62:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e70:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000e78:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e7a:	f000 fa89 	bl	8001390 <HAL_DMA_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_TIM_Base_MspInit+0xd4>
    {
      Error_Handler();
 8000e84:	f7ff fe50 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_TIM_Base_MspInit+0x100>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	201c      	movs	r0, #28
 8000e9a:	f000 fa42 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e9e:	201c      	movs	r0, #28
 8000ea0:	f000 fa5b 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	200001f4 	.word	0x200001f4
 8000eb8:	40026088 	.word	0x40026088

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f8ec 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <DMA1_Stream5_IRQHandler+0x10>)
 8000f26:	f000 fae1 	bl	80014ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200001f4 	.word	0x200001f4

08000f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM2_IRQHandler+0x10>)
 8000f3a:	f004 fa19 	bl	8005370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001ac 	.word	0x200001ac

08000f48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <OTG_FS_IRQHandler+0x10>)
 8000f4e:	f001 f929 	bl	80021a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000638 	.word	0x20000638

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f008 fb92 	bl	80096b4 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20020000 	.word	0x20020000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	20000254 	.word	0x20000254
 8000fc4:	20000950 	.word	0x20000950

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ff2:	490e      	ldr	r1, [pc, #56]	; (800102c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001008:	4c0b      	ldr	r4, [pc, #44]	; (8001038 <LoopFillZerobss+0x26>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001016:	f7ff ffd7 	bl	8000fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f008 fb51 	bl	80096c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fa8f 	bl	8000540 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001030:	08009980 	.word	0x08009980
  ldr r2, =_sbss
 8001034:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001038:	2000094c 	.word	0x2000094c

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f94f 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fd5e 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f967 	bl	8001376 <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f92f 	bl	8001322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	20000258 	.word	0x20000258

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000258 	.word	0x20000258

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff8e 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff29 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff3e 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff8e 	bl	8001260 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5d 	bl	800120c <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff31 	bl	80011d0 <__NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffa2 	bl	80012c8 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff feb6 	bl	800110c <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e099      	b.n	80014e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2202      	movs	r2, #2
 80013b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013cc:	e00f      	b.n	80013ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ce:	f7ff fe9d 	bl	800110c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d908      	bls.n	80013ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2220      	movs	r2, #32
 80013e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e078      	b.n	80014e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1e8      	bne.n	80013ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <HAL_DMA_Init+0x158>)
 8001408:	4013      	ands	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800141a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4313      	orrs	r3, r2
 800143e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	2b04      	cmp	r3, #4
 8001446:	d107      	bne.n	8001458 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4313      	orrs	r3, r2
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f023 0307 	bic.w	r3, r3, #7
 800146e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	4313      	orrs	r3, r2
 8001478:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	2b04      	cmp	r3, #4
 8001480:	d117      	bne.n	80014b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4313      	orrs	r3, r2
 800148a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00e      	beq.n	80014b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f9e9 	bl	800186c <DMA_CheckFifoParam>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014ae:	2301      	movs	r3, #1
 80014b0:	e016      	b.n	80014e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f9a0 	bl	8001800 <DMA_CalcBaseAndBitshift>
 80014c0:	4603      	mov	r3, r0
 80014c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	223f      	movs	r2, #63	; 0x3f
 80014ca:	409a      	lsls	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	f010803f 	.word	0xf010803f

080014ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014f8:	4b8e      	ldr	r3, [pc, #568]	; (8001734 <HAL_DMA_IRQHandler+0x248>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a8e      	ldr	r2, [pc, #568]	; (8001738 <HAL_DMA_IRQHandler+0x24c>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0a9b      	lsrs	r3, r3, #10
 8001504:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2208      	movs	r2, #8
 8001518:	409a      	lsls	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01a      	beq.n	8001558 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	2208      	movs	r2, #8
 8001546:	409a      	lsls	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	2201      	movs	r2, #1
 800155e:	409a      	lsls	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d012      	beq.n	800158e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	2201      	movs	r2, #1
 800157c:	409a      	lsls	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	f043 0202 	orr.w	r2, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	2204      	movs	r2, #4
 8001594:	409a      	lsls	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d012      	beq.n	80015c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00b      	beq.n	80015c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b0:	2204      	movs	r2, #4
 80015b2:	409a      	lsls	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f043 0204 	orr.w	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2210      	movs	r2, #16
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d043      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d03c      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e6:	2210      	movs	r2, #16
 80015e8:	409a      	lsls	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d018      	beq.n	800162e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d024      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4798      	blx	r3
 800161a:	e01f      	b.n	800165c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01b      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	4798      	blx	r3
 800162c:	e016      	b.n	800165c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d107      	bne.n	800164c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0208 	bic.w	r2, r2, #8
 800164a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	2220      	movs	r2, #32
 8001662:	409a      	lsls	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 808f 	beq.w	800178c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 8087 	beq.w	800178c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001682:	2220      	movs	r2, #32
 8001684:	409a      	lsls	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b05      	cmp	r3, #5
 8001694:	d136      	bne.n	8001704 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0216 	bic.w	r2, r2, #22
 80016a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <HAL_DMA_IRQHandler+0x1da>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0208 	bic.w	r2, r2, #8
 80016d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016da:	223f      	movs	r2, #63	; 0x3f
 80016dc:	409a      	lsls	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d07e      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
        }
        return;
 8001702:	e079      	b.n	80017f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d01d      	beq.n	800174e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10d      	bne.n	800173c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	2b00      	cmp	r3, #0
 8001726:	d031      	beq.n	800178c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	4798      	blx	r3
 8001730:	e02c      	b.n	800178c <HAL_DMA_IRQHandler+0x2a0>
 8001732:	bf00      	nop
 8001734:	20000000 	.word	0x20000000
 8001738:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	2b00      	cmp	r3, #0
 8001742:	d023      	beq.n	800178c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
 800174c:	e01e      	b.n	800178c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10f      	bne.n	800177c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0210 	bic.w	r2, r2, #16
 800176a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	2b00      	cmp	r3, #0
 8001792:	d032      	beq.n	80017fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d022      	beq.n	80017e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2205      	movs	r2, #5
 80017a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3301      	adds	r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d307      	bcc.n	80017d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f2      	bne.n	80017b8 <HAL_DMA_IRQHandler+0x2cc>
 80017d2:	e000      	b.n	80017d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
 80017f6:	e000      	b.n	80017fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80017f8:	bf00      	nop
    }
  }
}
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	3b10      	subs	r3, #16
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <DMA_CalcBaseAndBitshift+0x64>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800181a:	4a13      	ldr	r2, [pc, #76]	; (8001868 <DMA_CalcBaseAndBitshift+0x68>)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b03      	cmp	r3, #3
 800182c:	d909      	bls.n	8001842 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	1d1a      	adds	r2, r3, #4
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	659a      	str	r2, [r3, #88]	; 0x58
 8001840:	e007      	b.n	8001852 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	aaaaaaab 	.word	0xaaaaaaab
 8001868:	08009968 	.word	0x08009968

0800186c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d11f      	bne.n	80018c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d856      	bhi.n	800193a <DMA_CheckFifoParam+0xce>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <DMA_CheckFifoParam+0x28>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080018b7 	.word	0x080018b7
 800189c:	080018a5 	.word	0x080018a5
 80018a0:	0800193b 	.word	0x0800193b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d046      	beq.n	800193e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018b4:	e043      	b.n	800193e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018be:	d140      	bne.n	8001942 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018c4:	e03d      	b.n	8001942 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ce:	d121      	bne.n	8001914 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d837      	bhi.n	8001946 <DMA_CheckFifoParam+0xda>
 80018d6:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <DMA_CheckFifoParam+0x70>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018f3 	.word	0x080018f3
 80018e4:	080018ed 	.word	0x080018ed
 80018e8:	08001905 	.word	0x08001905
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
      break;
 80018f0:	e030      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d025      	beq.n	800194a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001902:	e022      	b.n	800194a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800190c:	d11f      	bne.n	800194e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001912:	e01c      	b.n	800194e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d903      	bls.n	8001922 <DMA_CheckFifoParam+0xb6>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d003      	beq.n	8001928 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001920:	e018      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
      break;
 8001926:	e015      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00e      	beq.n	8001952 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
      break;
 8001938:	e00b      	b.n	8001952 <DMA_CheckFifoParam+0xe6>
      break;
 800193a:	bf00      	nop
 800193c:	e00a      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;
 800193e:	bf00      	nop
 8001940:	e008      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;
 8001942:	bf00      	nop
 8001944:	e006      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;
 8001946:	bf00      	nop
 8001948:	e004      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;
 800194a:	bf00      	nop
 800194c:	e002      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;   
 800194e:	bf00      	nop
 8001950:	e000      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;
 8001952:	bf00      	nop
    }
  } 
  
  return status; 
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e16b      	b.n	8001c58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 815a 	bne.w	8001c52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d005      	beq.n	80019b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d130      	bne.n	8001a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 0201 	and.w	r2, r3, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d017      	beq.n	8001a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d123      	bne.n	8001aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80b4 	beq.w	8001c52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b60      	ldr	r3, [pc, #384]	; (8001c70 <HAL_GPIO_Init+0x30c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a5f      	ldr	r2, [pc, #380]	; (8001c70 <HAL_GPIO_Init+0x30c>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_GPIO_Init+0x30c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b06:	4a5b      	ldr	r2, [pc, #364]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_GPIO_Init+0x314>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02b      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a51      	ldr	r2, [pc, #324]	; (8001c7c <HAL_GPIO_Init+0x318>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d025      	beq.n	8001b86 <HAL_GPIO_Init+0x222>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a50      	ldr	r2, [pc, #320]	; (8001c80 <HAL_GPIO_Init+0x31c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01f      	beq.n	8001b82 <HAL_GPIO_Init+0x21e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4f      	ldr	r2, [pc, #316]	; (8001c84 <HAL_GPIO_Init+0x320>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x21a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4e      	ldr	r2, [pc, #312]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x216>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4d      	ldr	r2, [pc, #308]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x212>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4c      	ldr	r2, [pc, #304]	; (8001c90 <HAL_GPIO_Init+0x32c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x20e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4b      	ldr	r2, [pc, #300]	; (8001c94 <HAL_GPIO_Init+0x330>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x20a>
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	e00e      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b6e:	2308      	movs	r3, #8
 8001b70:	e00c      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b72:	2306      	movs	r3, #6
 8001b74:	e00a      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b76:	2305      	movs	r3, #5
 8001b78:	e008      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001baa:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bce:	4a32      	ldr	r2, [pc, #200]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf8:	4a27      	ldr	r2, [pc, #156]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c22:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c4c:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	f67f ae90 	bls.w	8001980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40021400 	.word	0x40021400
 8001c90:	40021800 	.word	0x40021800
 8001c94:	40021c00 	.word	0x40021c00
 8001c98:	40013c00 	.word	0x40013c00

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb8:	e003      	b.n	8001cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	041a      	lsls	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd0:	b08f      	sub	sp, #60	; 0x3c
 8001cd2:	af0a      	add	r7, sp, #40	; 0x28
 8001cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e054      	b.n	8001d8a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f007 fa30 	bl	8009160 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2203      	movs	r2, #3
 8001d04:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 fa5e 	bl	80061e0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	687e      	ldr	r6, [r7, #4]
 8001d2c:	466d      	mov	r5, sp
 8001d2e:	f106 0410 	add.w	r4, r6, #16
 8001d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d42:	1d33      	adds	r3, r6, #4
 8001d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f004 f9d8 	bl	80060fc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	4618      	mov	r0, r3
 8001d54:	f004 fa55 	bl	8006202 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	687e      	ldr	r6, [r7, #4]
 8001d60:	466d      	mov	r5, sp
 8001d62:	f106 0410 	add.w	r4, r6, #16
 8001d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d76:	1d33      	adds	r3, r6, #4
 8001d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	f004 fbde 	bl	800653c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d92 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d92:	b590      	push	{r4, r7, lr}
 8001d94:	b089      	sub	sp, #36	; 0x24
 8001d96:	af04      	add	r7, sp, #16
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	4608      	mov	r0, r1
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4603      	mov	r3, r0
 8001da2:	70fb      	strb	r3, [r7, #3]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70bb      	strb	r3, [r7, #2]
 8001da8:	4613      	mov	r3, r2
 8001daa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_HCD_HC_Init+0x28>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e076      	b.n	8001ea8 <HAL_HCD_HC_Init+0x116>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	212c      	movs	r1, #44	; 0x2c
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	333d      	adds	r3, #61	; 0x3d
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	212c      	movs	r1, #44	; 0x2c
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	3338      	adds	r3, #56	; 0x38
 8001de2:	787a      	ldrb	r2, [r7, #1]
 8001de4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	3340      	adds	r3, #64	; 0x40
 8001df4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001df6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	212c      	movs	r1, #44	; 0x2c
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	3339      	adds	r3, #57	; 0x39
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	212c      	movs	r1, #44	; 0x2c
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	333f      	adds	r3, #63	; 0x3f
 8001e18:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	78ba      	ldrb	r2, [r7, #2]
 8001e22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e26:	b2d0      	uxtb	r0, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	333a      	adds	r3, #58	; 0x3a
 8001e34:	4602      	mov	r2, r0
 8001e36:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da09      	bge.n	8001e54 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	333b      	adds	r3, #59	; 0x3b
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	e008      	b.n	8001e66 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	212c      	movs	r1, #44	; 0x2c
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	333b      	adds	r3, #59	; 0x3b
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	212c      	movs	r1, #44	; 0x2c
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	333c      	adds	r3, #60	; 0x3c
 8001e74:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e78:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	787c      	ldrb	r4, [r7, #1]
 8001e80:	78ba      	ldrb	r2, [r7, #2]
 8001e82:	78f9      	ldrb	r1, [r7, #3]
 8001e84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e86:	9302      	str	r3, [sp, #8]
 8001e88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	4623      	mov	r3, r4
 8001e96:	f004 fcd7 	bl	8006848 <USB_HC_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}

08001eb0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_HCD_HC_Halt+0x1e>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e00f      	b.n	8001eee <HAL_HCD_HC_Halt+0x3e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 ff27 	bl	8006d32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	4608      	mov	r0, r1
 8001f02:	4611      	mov	r1, r2
 8001f04:	461a      	mov	r2, r3
 8001f06:	4603      	mov	r3, r0
 8001f08:	70fb      	strb	r3, [r7, #3]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70bb      	strb	r3, [r7, #2]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	333b      	adds	r3, #59	; 0x3b
 8001f20:	78ba      	ldrb	r2, [r7, #2]
 8001f22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	333f      	adds	r3, #63	; 0x3f
 8001f32:	787a      	ldrb	r2, [r7, #1]
 8001f34:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f36:	7c3b      	ldrb	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d112      	bne.n	8001f62 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	3342      	adds	r3, #66	; 0x42
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	333d      	adds	r3, #61	; 0x3d
 8001f5c:	7f3a      	ldrb	r2, [r7, #28]
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	e008      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3342      	adds	r3, #66	; 0x42
 8001f70:	2202      	movs	r2, #2
 8001f72:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	f200 80c6 	bhi.w	8002108 <HAL_HCD_HC_SubmitRequest+0x210>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	080020f5 	.word	0x080020f5
 8001f8c:	08001ff9 	.word	0x08001ff9
 8001f90:	08002077 	.word	0x08002077
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f94:	7c3b      	ldrb	r3, [r7, #16]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	f040 80b8 	bne.w	800210c <HAL_HCD_HC_SubmitRequest+0x214>
 8001f9c:	78bb      	ldrb	r3, [r7, #2]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 80b4 	bne.w	800210c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001fa4:	8b3b      	ldrh	r3, [r7, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d108      	bne.n	8001fbc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3355      	adds	r3, #85	; 0x55
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	212c      	movs	r1, #44	; 0x2c
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3355      	adds	r3, #85	; 0x55
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	3342      	adds	r3, #66	; 0x42
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fe2:	e093      	b.n	800210c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	212c      	movs	r1, #44	; 0x2c
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	3342      	adds	r3, #66	; 0x42
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	701a      	strb	r2, [r3, #0]
      break;
 8001ff6:	e089      	b.n	800210c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ff8:	78bb      	ldrb	r3, [r7, #2]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d11d      	bne.n	800203a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3355      	adds	r3, #85	; 0x55
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	3342      	adds	r3, #66	; 0x42
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002024:	e073      	b.n	800210e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	3342      	adds	r3, #66	; 0x42
 8002034:	2202      	movs	r2, #2
 8002036:	701a      	strb	r2, [r3, #0]
      break;
 8002038:	e069      	b.n	800210e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	212c      	movs	r1, #44	; 0x2c
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	3354      	adds	r3, #84	; 0x54
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3342      	adds	r3, #66	; 0x42
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
      break;
 8002060:	e055      	b.n	800210e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	212c      	movs	r1, #44	; 0x2c
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	3342      	adds	r3, #66	; 0x42
 8002070:	2202      	movs	r2, #2
 8002072:	701a      	strb	r2, [r3, #0]
      break;
 8002074:	e04b      	b.n	800210e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002076:	78bb      	ldrb	r3, [r7, #2]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11d      	bne.n	80020b8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	3355      	adds	r3, #85	; 0x55
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	3342      	adds	r3, #66	; 0x42
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020a2:	e034      	b.n	800210e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	212c      	movs	r1, #44	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	3342      	adds	r3, #66	; 0x42
 80020b2:	2202      	movs	r2, #2
 80020b4:	701a      	strb	r2, [r3, #0]
      break;
 80020b6:	e02a      	b.n	800210e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	212c      	movs	r1, #44	; 0x2c
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	3354      	adds	r3, #84	; 0x54
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	3342      	adds	r3, #66	; 0x42
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
      break;
 80020de:	e016      	b.n	800210e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	3342      	adds	r3, #66	; 0x42
 80020ee:	2202      	movs	r2, #2
 80020f0:	701a      	strb	r2, [r3, #0]
      break;
 80020f2:	e00c      	b.n	800210e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3342      	adds	r3, #66	; 0x42
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
      break;
 8002106:	e002      	b.n	800210e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002108:	bf00      	nop
 800210a:	e000      	b.n	800210e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800210c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	212c      	movs	r1, #44	; 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	3344      	adds	r3, #68	; 0x44
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	8b3a      	ldrh	r2, [r7, #24]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	202c      	movs	r0, #44	; 0x2c
 8002128:	fb00 f303 	mul.w	r3, r0, r3
 800212c:	440b      	add	r3, r1
 800212e:	334c      	adds	r3, #76	; 0x4c
 8002130:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3360      	adds	r3, #96	; 0x60
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3350      	adds	r3, #80	; 0x50
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3339      	adds	r3, #57	; 0x39
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3361      	adds	r3, #97	; 0x61
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	222c      	movs	r2, #44	; 0x2c
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	3338      	adds	r3, #56	; 0x38
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	18d1      	adds	r1, r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	f004 fc7a 	bl	8006a8c <USB_HC_StartXfer>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop

080021a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 f97b 	bl	80064b6 <USB_GetMode>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	f040 80f6 	bne.w	80023b4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 f95f 	bl	8006490 <USB_ReadInterrupts>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80ec 	beq.w	80023b2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f004 f956 	bl	8006490 <USB_ReadInterrupts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ee:	d104      	bne.n	80021fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 f946 	bl	8006490 <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800220e:	d104      	bne.n	800221a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002218:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 f936 	bl	8006490 <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800222a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800222e:	d104      	bne.n	800223a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002238:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f926 	bl	8006490 <USB_ReadInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b02      	cmp	r3, #2
 800224c:	d103      	bne.n	8002256 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2202      	movs	r2, #2
 8002254:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f004 f918 	bl	8006490 <USB_ReadInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800226a:	d11c      	bne.n	80022a6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002274:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10f      	bne.n	80022a6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002286:	2110      	movs	r1, #16
 8002288:	6938      	ldr	r0, [r7, #16]
 800228a:	f004 f807 	bl	800629c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800228e:	6938      	ldr	r0, [r7, #16]
 8002290:	f004 f838 	bl	8006304 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	4618      	mov	r0, r3
 800229c:	f004 fa0e 	bl	80066bc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f006 ffdb 	bl	800925c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 f8f0 	bl	8006490 <USB_ReadInterrupts>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ba:	d102      	bne.n	80022c2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f001 f89e 	bl	80033fe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 f8e2 	bl	8006490 <USB_ReadInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d106      	bne.n	80022e4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f006 ffa4 	bl	8009224 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2208      	movs	r2, #8
 80022e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 f8d1 	bl	8006490 <USB_ReadInterrupts>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d101      	bne.n	80022fc <HAL_HCD_IRQHandler+0x158>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_HCD_IRQHandler+0x15a>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d012      	beq.n	8002328 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0210 	bic.w	r2, r2, #16
 8002310:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 ffa1 	bl	800325a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0210 	orr.w	r2, r2, #16
 8002326:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 f8af 	bl	8006490 <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800233c:	d13a      	bne.n	80023b4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f004 fce4 	bl	8006d10 <USB_HC_ReadInterrupt>
 8002348:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e025      	b.n	800239c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d018      	beq.n	8002396 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237a:	d106      	bne.n	800238a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8ab 	bl	80024de <HCD_HC_IN_IRQHandler>
 8002388:	e005      	b.n	8002396 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	4619      	mov	r1, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fbf9 	bl	8002b88 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3d4      	bcc.n	8002350 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ae:	615a      	str	r2, [r3, #20]
 80023b0:	e000      	b.n	80023b4 <HAL_HCD_IRQHandler+0x210>
      return;
 80023b2:	bf00      	nop
    }
  }
}
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_HCD_Start+0x16>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e013      	b.n	80023f8 <HAL_HCD_Start+0x3e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2101      	movs	r1, #1
 80023de:	4618      	mov	r0, r3
 80023e0:	f004 f9d0 	bl	8006784 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 fee8 	bl	80061be <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_HCD_Stop+0x16>
 8002412:	2302      	movs	r3, #2
 8002414:	e00d      	b.n	8002432 <HAL_HCD_Stop+0x32>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f004 fdbe 	bl	8006fa4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f004 f972 	bl	8006730 <USB_ResetPort>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3360      	adds	r3, #96	; 0x60
 8002470:	781b      	ldrb	r3, [r3, #0]
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3350      	adds	r3, #80	; 0x50
 8002498:	681b      	ldr	r3, [r3, #0]
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f004 f9b6 	bl	8006824 <USB_GetCurrentFrame>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 f991 	bl	80067f6 <USB_GetHostSpeed>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d11a      	bne.n	8002544 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	461a      	mov	r2, r3
 800251c:	2304      	movs	r3, #4
 800251e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3361      	adds	r3, #97	; 0x61
 800252e:	2206      	movs	r2, #6
 8002530:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f004 fbf8 	bl	8006d32 <USB_HC_Halt>
 8002542:	e0af      	b.n	80026a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255a:	d11b      	bne.n	8002594 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800256e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	3361      	adds	r3, #97	; 0x61
 800257e:	2207      	movs	r2, #7
 8002580:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f004 fbd0 	bl	8006d32 <USB_HC_Halt>
 8002592:	e087      	b.n	80026a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d109      	bne.n	80025be <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	461a      	mov	r2, r3
 80025b8:	2320      	movs	r3, #32
 80025ba:	6093      	str	r3, [r2, #8]
 80025bc:	e072      	b.n	80026a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d11a      	bne.n	800260a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	2308      	movs	r3, #8
 80025e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3361      	adds	r3, #97	; 0x61
 80025f4:	2205      	movs	r2, #5
 80025f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f004 fb95 	bl	8006d32 <USB_HC_Halt>
 8002608:	e04c      	b.n	80026a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002620:	d11b      	bne.n	800265a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	461a      	mov	r2, r3
 8002630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002634:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	3361      	adds	r3, #97	; 0x61
 8002644:	2208      	movs	r2, #8
 8002646:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f004 fb6d 	bl	8006d32 <USB_HC_Halt>
 8002658:	e024      	b.n	80026a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d119      	bne.n	80026a4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	3361      	adds	r3, #97	; 0x61
 8002690:	2206      	movs	r2, #6
 8002692:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 fb47 	bl	8006d32 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ba:	d112      	bne.n	80026e2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 fb33 	bl	8006d32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	461a      	mov	r2, r3
 80026da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026de:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026e0:	e24e      	b.n	8002b80 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	f040 80df 	bne.w	80028b8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d019      	beq.n	8002736 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	3348      	adds	r3, #72	; 0x48
 8002710:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	0159      	lsls	r1, r3, #5
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	440b      	add	r3, r1
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002724:	1ad2      	subs	r2, r2, r3
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	202c      	movs	r0, #44	; 0x2c
 800272c:	fb00 f303 	mul.w	r3, r0, r3
 8002730:	440b      	add	r3, r1
 8002732:	3350      	adds	r3, #80	; 0x50
 8002734:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3361      	adds	r3, #97	; 0x61
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	335c      	adds	r3, #92	; 0x5c
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	461a      	mov	r2, r3
 8002768:	2301      	movs	r3, #1
 800276a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	333f      	adds	r3, #63	; 0x3f
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	333f      	adds	r3, #63	; 0x3f
 800278e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002790:	2b02      	cmp	r3, #2
 8002792:	d111      	bne.n	80027b8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 fac7 	bl	8006d32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	461a      	mov	r2, r3
 80027b2:	2310      	movs	r3, #16
 80027b4:	6093      	str	r3, [r2, #8]
 80027b6:	e03a      	b.n	800282e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	333f      	adds	r3, #63	; 0x3f
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d009      	beq.n	80027e0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	333f      	adds	r3, #63	; 0x3f
 80027da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d126      	bne.n	800282e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	0151      	lsls	r1, r2, #5
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	440a      	add	r2, r1
 80027f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027fe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3360      	adds	r3, #96	; 0x60
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	b2d9      	uxtb	r1, r3
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	202c      	movs	r0, #44	; 0x2c
 800281c:	fb00 f303 	mul.w	r3, r0, r3
 8002820:	4413      	add	r3, r2
 8002822:	3360      	adds	r3, #96	; 0x60
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f006 fd25 	bl	8009278 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d12b      	bne.n	800288e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3348      	adds	r3, #72	; 0x48
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	202c      	movs	r0, #44	; 0x2c
 800284c:	fb00 f202 	mul.w	r2, r0, r2
 8002850:	440a      	add	r2, r1
 8002852:	3240      	adds	r2, #64	; 0x40
 8002854:	8812      	ldrh	r2, [r2, #0]
 8002856:	fbb3 f3f2 	udiv	r3, r3, r2
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 818e 	beq.w	8002b80 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3354      	adds	r3, #84	; 0x54
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	f083 0301 	eor.w	r3, r3, #1
 8002878:	b2d8      	uxtb	r0, r3
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3354      	adds	r3, #84	; 0x54
 8002888:	4602      	mov	r2, r0
 800288a:	701a      	strb	r2, [r3, #0]
}
 800288c:	e178      	b.n	8002b80 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	3354      	adds	r3, #84	; 0x54
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	f083 0301 	eor.w	r3, r3, #1
 80028a2:	b2d8      	uxtb	r0, r3
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3354      	adds	r3, #84	; 0x54
 80028b2:	4602      	mov	r2, r0
 80028b4:	701a      	strb	r2, [r3, #0]
}
 80028b6:	e163      	b.n	8002b80 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	f040 80f6 	bne.w	8002abc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3361      	adds	r3, #97	; 0x61
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d109      	bne.n	80028f8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	3360      	adds	r3, #96	; 0x60
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e0c9      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3361      	adds	r3, #97	; 0x61
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d109      	bne.n	8002920 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3360      	adds	r3, #96	; 0x60
 800291a:	2205      	movs	r2, #5
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e0b5      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3361      	adds	r3, #97	; 0x61
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d009      	beq.n	8002948 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	3361      	adds	r3, #97	; 0x61
 8002942:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002944:	2b08      	cmp	r3, #8
 8002946:	d150      	bne.n	80029ea <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	335c      	adds	r3, #92	; 0x5c
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	202c      	movs	r0, #44	; 0x2c
 8002960:	fb00 f303 	mul.w	r3, r0, r3
 8002964:	440b      	add	r3, r1
 8002966:	335c      	adds	r3, #92	; 0x5c
 8002968:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	335c      	adds	r3, #92	; 0x5c
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d912      	bls.n	80029a4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	335c      	adds	r3, #92	; 0x5c
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3360      	adds	r3, #96	; 0x60
 800299e:	2204      	movs	r2, #4
 80029a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029a2:	e073      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3360      	adds	r3, #96	; 0x60
 80029b2:	2202      	movs	r2, #2
 80029b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029cc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029d4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029e8:	e050      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3361      	adds	r3, #97	; 0x61
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d122      	bne.n	8002a44 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3360      	adds	r3, #96	; 0x60
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a26:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a2e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e023      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3361      	adds	r3, #97	; 0x61
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b07      	cmp	r3, #7
 8002a56:	d119      	bne.n	8002a8c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	335c      	adds	r3, #92	; 0x5c
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	202c      	movs	r0, #44	; 0x2c
 8002a70:	fb00 f303 	mul.w	r3, r0, r3
 8002a74:	440b      	add	r3, r1
 8002a76:	335c      	adds	r3, #92	; 0x5c
 8002a78:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3360      	adds	r3, #96	; 0x60
 8002a88:	2204      	movs	r2, #4
 8002a8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	b2d9      	uxtb	r1, r3
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	202c      	movs	r0, #44	; 0x2c
 8002aa8:	fb00 f303 	mul.w	r3, r0, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3360      	adds	r3, #96	; 0x60
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f006 fbdf 	bl	8009278 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aba:	e061      	b.n	8002b80 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d156      	bne.n	8002b80 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	333f      	adds	r3, #63	; 0x3f
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d111      	bne.n	8002b0a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	335c      	adds	r3, #92	; 0x5c
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f004 f915 	bl	8006d32 <USB_HC_Halt>
 8002b08:	e031      	b.n	8002b6e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	333f      	adds	r3, #63	; 0x3f
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	333f      	adds	r3, #63	; 0x3f
 8002b2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d11d      	bne.n	8002b6e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	335c      	adds	r3, #92	; 0x5c
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d110      	bne.n	8002b6e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3361      	adds	r3, #97	; 0x61
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 f8e2 	bl	8006d32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	6093      	str	r3, [r2, #8]
}
 8002b80:	bf00      	nop
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d11a      	bne.n	8002bee <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	212c      	movs	r1, #44	; 0x2c
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3361      	adds	r3, #97	; 0x61
 8002bd8:	2206      	movs	r2, #6
 8002bda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 f8a3 	bl	8006d32 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002bec:	e331      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d12e      	bne.n	8002c62 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	2320      	movs	r3, #32
 8002c14:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	333d      	adds	r3, #61	; 0x3d
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	f040 8313 	bne.w	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	333d      	adds	r3, #61	; 0x3d
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	3360      	adds	r3, #96	; 0x60
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 f869 	bl	8006d32 <USB_HC_Halt>
}
 8002c60:	e2f7      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c78:	d112      	bne.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	461a      	mov	r2, r3
 8002c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f004 f84a 	bl	8006d32 <USB_HC_Halt>
}
 8002c9e:	e2d8      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d140      	bne.n	8002d38 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	335c      	adds	r3, #92	; 0x5c
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	d111      	bne.n	8002d02 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	333d      	adds	r3, #61	; 0x3d
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2340      	movs	r3, #64	; 0x40
 8002d00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2301      	movs	r3, #1
 8002d12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3361      	adds	r3, #97	; 0x61
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 fffe 	bl	8006d32 <USB_HC_Halt>
}
 8002d36:	e28c      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b40      	cmp	r3, #64	; 0x40
 8002d4c:	d12c      	bne.n	8002da8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3361      	adds	r3, #97	; 0x61
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	333d      	adds	r3, #61	; 0x3d
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	335c      	adds	r3, #92	; 0x5c
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 ffcf 	bl	8006d32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	461a      	mov	r2, r3
 8002da2:	2340      	movs	r3, #64	; 0x40
 8002da4:	6093      	str	r3, [r2, #8]
}
 8002da6:	e254      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d11a      	bne.n	8002df4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2308      	movs	r3, #8
 8002dce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3361      	adds	r3, #97	; 0x61
 8002dde:	2205      	movs	r2, #5
 8002de0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 ffa0 	bl	8006d32 <USB_HC_Halt>
}
 8002df2:	e22e      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	d140      	bne.n	8002e8c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	335c      	adds	r3, #92	; 0x5c
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3361      	adds	r3, #97	; 0x61
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	333d      	adds	r3, #61	; 0x3d
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d112      	bne.n	8002e68 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	333c      	adds	r3, #60	; 0x3c
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d108      	bne.n	8002e68 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	333d      	adds	r3, #61	; 0x3d
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 ff5d 	bl	8006d32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	461a      	mov	r2, r3
 8002e86:	2310      	movs	r3, #16
 8002e88:	6093      	str	r3, [r2, #8]
}
 8002e8a:	e1e2      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b80      	cmp	r3, #128	; 0x80
 8002ea0:	d164      	bne.n	8002f6c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d111      	bne.n	8002ece <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3361      	adds	r3, #97	; 0x61
 8002eb8:	2206      	movs	r2, #6
 8002eba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 ff33 	bl	8006d32 <USB_HC_Halt>
 8002ecc:	e044      	b.n	8002f58 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	335c      	adds	r3, #92	; 0x5c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	202c      	movs	r0, #44	; 0x2c
 8002ee6:	fb00 f303 	mul.w	r3, r0, r3
 8002eea:	440b      	add	r3, r1
 8002eec:	335c      	adds	r3, #92	; 0x5c
 8002eee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	212c      	movs	r1, #44	; 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	335c      	adds	r3, #92	; 0x5c
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d920      	bls.n	8002f46 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	335c      	adds	r3, #92	; 0x5c
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3360      	adds	r3, #96	; 0x60
 8002f24:	2204      	movs	r2, #4
 8002f26:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	b2d9      	uxtb	r1, r3
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	202c      	movs	r0, #44	; 0x2c
 8002f32:	fb00 f303 	mul.w	r3, r0, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3360      	adds	r3, #96	; 0x60
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f006 f99a 	bl	8009278 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f44:	e008      	b.n	8002f58 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3360      	adds	r3, #96	; 0x60
 8002f54:	2202      	movs	r2, #2
 8002f56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	6093      	str	r3, [r2, #8]
}
 8002f6a:	e172      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f82:	d11b      	bne.n	8002fbc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	3361      	adds	r3, #97	; 0x61
 8002f92:	2208      	movs	r2, #8
 8002f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fec6 	bl	8006d32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb8:	6093      	str	r3, [r2, #8]
}
 8002fba:	e14a      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	f040 813f 	bne.w	8003252 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3361      	adds	r3, #97	; 0x61
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d17d      	bne.n	80030e4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3360      	adds	r3, #96	; 0x60
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	333f      	adds	r3, #63	; 0x3f
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d00a      	beq.n	8003024 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	333f      	adds	r3, #63	; 0x3f
 800301c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800301e:	2b03      	cmp	r3, #3
 8003020:	f040 8100 	bne.w	8003224 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d113      	bne.n	8003054 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	212c      	movs	r1, #44	; 0x2c
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	4413      	add	r3, r2
 8003038:	3355      	adds	r3, #85	; 0x55
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	f083 0301 	eor.w	r3, r3, #1
 8003040:	b2d8      	uxtb	r0, r3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3355      	adds	r3, #85	; 0x55
 8003050:	4602      	mov	r2, r0
 8003052:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b01      	cmp	r3, #1
 800305a:	f040 80e3 	bne.w	8003224 <HCD_HC_OUT_IRQHandler+0x69c>
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	334c      	adds	r3, #76	; 0x4c
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80d8 	beq.w	8003224 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	334c      	adds	r3, #76	; 0x4c
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	202c      	movs	r0, #44	; 0x2c
 800308a:	fb00 f202 	mul.w	r2, r0, r2
 800308e:	440a      	add	r2, r1
 8003090:	3240      	adds	r2, #64	; 0x40
 8003092:	8812      	ldrh	r2, [r2, #0]
 8003094:	4413      	add	r3, r2
 8003096:	3b01      	subs	r3, #1
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	202c      	movs	r0, #44	; 0x2c
 800309e:	fb00 f202 	mul.w	r2, r0, r2
 80030a2:	440a      	add	r2, r1
 80030a4:	3240      	adds	r2, #64	; 0x40
 80030a6:	8812      	ldrh	r2, [r2, #0]
 80030a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80b5 	beq.w	8003224 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	212c      	movs	r1, #44	; 0x2c
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	3355      	adds	r3, #85	; 0x55
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	f083 0301 	eor.w	r3, r3, #1
 80030ce:	b2d8      	uxtb	r0, r3
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3355      	adds	r3, #85	; 0x55
 80030de:	4602      	mov	r2, r0
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e09f      	b.n	8003224 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3361      	adds	r3, #97	; 0x61
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d109      	bne.n	800310c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3360      	adds	r3, #96	; 0x60
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e08b      	b.n	8003224 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3361      	adds	r3, #97	; 0x61
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d109      	bne.n	8003134 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3360      	adds	r3, #96	; 0x60
 800312e:	2202      	movs	r2, #2
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e077      	b.n	8003224 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	3361      	adds	r3, #97	; 0x61
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d109      	bne.n	800315c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3360      	adds	r3, #96	; 0x60
 8003156:	2205      	movs	r2, #5
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e063      	b.n	8003224 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	3361      	adds	r3, #97	; 0x61
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b06      	cmp	r3, #6
 800316e:	d009      	beq.n	8003184 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3361      	adds	r3, #97	; 0x61
 800317e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003180:	2b08      	cmp	r3, #8
 8003182:	d14f      	bne.n	8003224 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	335c      	adds	r3, #92	; 0x5c
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	202c      	movs	r0, #44	; 0x2c
 800319c:	fb00 f303 	mul.w	r3, r0, r3
 80031a0:	440b      	add	r3, r1
 80031a2:	335c      	adds	r3, #92	; 0x5c
 80031a4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	335c      	adds	r3, #92	; 0x5c
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d912      	bls.n	80031e0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	335c      	adds	r3, #92	; 0x5c
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3360      	adds	r3, #96	; 0x60
 80031da:	2204      	movs	r2, #4
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e021      	b.n	8003224 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3360      	adds	r3, #96	; 0x60
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003208:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003210:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	461a      	mov	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	461a      	mov	r2, r3
 8003232:	2302      	movs	r3, #2
 8003234:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	b2d9      	uxtb	r1, r3
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	202c      	movs	r0, #44	; 0x2c
 8003240:	fb00 f303 	mul.w	r3, r0, r3
 8003244:	4413      	add	r3, r2
 8003246:	3360      	adds	r3, #96	; 0x60
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f006 f813 	bl	8009278 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003252:	bf00      	nop
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b08a      	sub	sp, #40	; 0x28
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	0c5b      	lsrs	r3, r3, #17
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800328e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d004      	beq.n	80032a0 <HCD_RXQLVL_IRQHandler+0x46>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b05      	cmp	r3, #5
 800329a:	f000 80a9 	beq.w	80033f0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800329e:	e0aa      	b.n	80033f6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80a6 	beq.w	80033f4 <HCD_RXQLVL_IRQHandler+0x19a>
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3344      	adds	r3, #68	; 0x44
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 809b 	beq.w	80033f4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3350      	adds	r3, #80	; 0x50
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	441a      	add	r2, r3
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	202c      	movs	r0, #44	; 0x2c
 80032d8:	fb00 f303 	mul.w	r3, r0, r3
 80032dc:	440b      	add	r3, r1
 80032de:	334c      	adds	r3, #76	; 0x4c
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d87a      	bhi.n	80033dc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	212c      	movs	r1, #44	; 0x2c
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	3344      	adds	r3, #68	; 0x44
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	b292      	uxth	r2, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	f003 f86e 	bl	80063e0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3344      	adds	r3, #68	; 0x44
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	441a      	add	r2, r3
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	202c      	movs	r0, #44	; 0x2c
 800331e:	fb00 f303 	mul.w	r3, r0, r3
 8003322:	440b      	add	r3, r1
 8003324:	3344      	adds	r3, #68	; 0x44
 8003326:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3350      	adds	r3, #80	; 0x50
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	441a      	add	r2, r3
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	202c      	movs	r0, #44	; 0x2c
 8003342:	fb00 f303 	mul.w	r3, r0, r3
 8003346:	440b      	add	r3, r1
 8003348:	3350      	adds	r3, #80	; 0x50
 800334a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	0cdb      	lsrs	r3, r3, #19
 800335c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003360:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3340      	adds	r3, #64	; 0x40
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4293      	cmp	r3, r2
 8003378:	d13c      	bne.n	80033f4 <HCD_RXQLVL_IRQHandler+0x19a>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d039      	beq.n	80033f4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003396:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800339e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	3354      	adds	r3, #84	; 0x54
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	f083 0301 	eor.w	r3, r3, #1
 80033c6:	b2d8      	uxtb	r0, r3
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3354      	adds	r3, #84	; 0x54
 80033d6:	4602      	mov	r2, r0
 80033d8:	701a      	strb	r2, [r3, #0]
      break;
 80033da:	e00b      	b.n	80033f4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3360      	adds	r3, #96	; 0x60
 80033ea:	2204      	movs	r2, #4
 80033ec:	701a      	strb	r2, [r3, #0]
      break;
 80033ee:	e001      	b.n	80033f4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80033f0:	bf00      	nop
 80033f2:	e000      	b.n	80033f6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80033f4:	bf00      	nop
  }
}
 80033f6:	bf00      	nop
 80033f8:	3728      	adds	r7, #40	; 0x28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800342a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b02      	cmp	r3, #2
 8003434:	d10b      	bne.n	800344e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d102      	bne.n	8003446 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f005 fefd 	bl	8009240 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b08      	cmp	r3, #8
 8003456:	d132      	bne.n	80034be <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f043 0308 	orr.w	r3, r3, #8
 800345e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d126      	bne.n	80034b8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d113      	bne.n	800349a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003478:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800347c:	d106      	bne.n	800348c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2102      	movs	r1, #2
 8003484:	4618      	mov	r0, r3
 8003486:	f003 f919 	bl	80066bc <USB_InitFSLSPClkSel>
 800348a:	e011      	b.n	80034b0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	4618      	mov	r0, r3
 8003494:	f003 f912 	bl	80066bc <USB_InitFSLSPClkSel>
 8003498:	e00a      	b.n	80034b0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d106      	bne.n	80034b0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034a8:	461a      	mov	r2, r3
 80034aa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034ae:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f005 feef 	bl	8009294 <HAL_HCD_PortEnabled_Callback>
 80034b6:	e002      	b.n	80034be <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f005 fef9 	bl	80092b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d103      	bne.n	80034d0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f043 0320 	orr.w	r3, r3, #32
 80034ce:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034d6:	461a      	mov	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	6013      	str	r3, [r2, #0]
}
 80034dc:	bf00      	nop
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e12b      	b.n	800374e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd fb42 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	; 0x24
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003548:	f001 fa88 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 800354c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a81      	ldr	r2, [pc, #516]	; (8003758 <HAL_I2C_Init+0x274>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d807      	bhi.n	8003568 <HAL_I2C_Init+0x84>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a80      	ldr	r2, [pc, #512]	; (800375c <HAL_I2C_Init+0x278>)
 800355c:	4293      	cmp	r3, r2
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e006      	b.n	8003576 <HAL_I2C_Init+0x92>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a7d      	ldr	r2, [pc, #500]	; (8003760 <HAL_I2C_Init+0x27c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	bf94      	ite	ls
 8003570:	2301      	movls	r3, #1
 8003572:	2300      	movhi	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0e7      	b.n	800374e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4a78      	ldr	r2, [pc, #480]	; (8003764 <HAL_I2C_Init+0x280>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0c9b      	lsrs	r3, r3, #18
 8003588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a6a      	ldr	r2, [pc, #424]	; (8003758 <HAL_I2C_Init+0x274>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d802      	bhi.n	80035b8 <HAL_I2C_Init+0xd4>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3301      	adds	r3, #1
 80035b6:	e009      	b.n	80035cc <HAL_I2C_Init+0xe8>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	4a69      	ldr	r2, [pc, #420]	; (8003768 <HAL_I2C_Init+0x284>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	3301      	adds	r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	495c      	ldr	r1, [pc, #368]	; (8003758 <HAL_I2C_Init+0x274>)
 80035e8:	428b      	cmp	r3, r1
 80035ea:	d819      	bhi.n	8003620 <HAL_I2C_Init+0x13c>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1e59      	subs	r1, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003600:	400b      	ands	r3, r1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_I2C_Init+0x138>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1e59      	subs	r1, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fbb1 f3f3 	udiv	r3, r1, r3
 8003614:	3301      	adds	r3, #1
 8003616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361a:	e051      	b.n	80036c0 <HAL_I2C_Init+0x1dc>
 800361c:	2304      	movs	r3, #4
 800361e:	e04f      	b.n	80036c0 <HAL_I2C_Init+0x1dc>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d111      	bne.n	800364c <HAL_I2C_Init+0x168>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	e012      	b.n	8003672 <HAL_I2C_Init+0x18e>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1e58      	subs	r0, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	0099      	lsls	r1, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Init+0x196>
 8003676:	2301      	movs	r3, #1
 8003678:	e022      	b.n	80036c0 <HAL_I2C_Init+0x1dc>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10e      	bne.n	80036a0 <HAL_I2C_Init+0x1bc>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1e58      	subs	r0, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6859      	ldr	r1, [r3, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	440b      	add	r3, r1
 8003690:	fbb0 f3f3 	udiv	r3, r0, r3
 8003694:	3301      	adds	r3, #1
 8003696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369e:	e00f      	b.n	80036c0 <HAL_I2C_Init+0x1dc>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1e58      	subs	r0, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	0099      	lsls	r1, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	6809      	ldr	r1, [r1, #0]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6911      	ldr	r1, [r2, #16]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68d2      	ldr	r2, [r2, #12]
 80036fa:	4311      	orrs	r1, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	430b      	orrs	r3, r1
 8003702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	000186a0 	.word	0x000186a0
 800375c:	001e847f 	.word	0x001e847f
 8003760:	003d08ff 	.word	0x003d08ff
 8003764:	431bde83 	.word	0x431bde83
 8003768:	10624dd3 	.word	0x10624dd3

0800376c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e128      	b.n	80039d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a90      	ldr	r2, [pc, #576]	; (80039d8 <HAL_I2S_Init+0x26c>)
 8003796:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fd fa43 	bl	8000c24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037b4:	f023 030f 	bic.w	r3, r3, #15
 80037b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2202      	movs	r2, #2
 80037c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d060      	beq.n	800388c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037d2:	2310      	movs	r3, #16
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e001      	b.n	80037dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80037d8:	2320      	movs	r3, #32
 80037da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d802      	bhi.n	80037ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037ea:	2001      	movs	r0, #1
 80037ec:	f001 fa2c 	bl	8004c48 <HAL_RCCEx_GetPeriphCLKFreq>
 80037f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fa:	d125      	bne.n	8003848 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	fbb2 f2f3 	udiv	r2, r2, r3
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	461a      	mov	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	3305      	adds	r3, #5
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	e01f      	b.n	8003866 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	461a      	mov	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	3305      	adds	r3, #5
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e00e      	b.n	8003866 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	461a      	mov	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	3305      	adds	r3, #5
 8003864:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4a5c      	ldr	r2, [pc, #368]	; (80039dc <HAL_I2S_Init+0x270>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	08db      	lsrs	r3, r3, #3
 8003870:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	e003      	b.n	8003894 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800388c:	2302      	movs	r3, #2
 800388e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d902      	bls.n	80038a0 <HAL_I2S_Init+0x134>
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	2bff      	cmp	r3, #255	; 0xff
 800389e:	d907      	bls.n	80038b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	f043 0210 	orr.w	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e08f      	b.n	80039d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	ea42 0103 	orr.w	r1, r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038ce:	f023 030f 	bic.w	r3, r3, #15
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6851      	ldr	r1, [r2, #4]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6892      	ldr	r2, [r2, #8]
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68d2      	ldr	r2, [r2, #12]
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6992      	ldr	r2, [r2, #24]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d161      	bne.n	80039c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a38      	ldr	r2, [pc, #224]	; (80039e0 <HAL_I2S_Init+0x274>)
 8003900:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a37      	ldr	r2, [pc, #220]	; (80039e4 <HAL_I2S_Init+0x278>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_I2S_Init+0x1a4>
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <HAL_I2S_Init+0x27c>)
 800390e:	e001      	b.n	8003914 <HAL_I2S_Init+0x1a8>
 8003910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	4932      	ldr	r1, [pc, #200]	; (80039e4 <HAL_I2S_Init+0x278>)
 800391c:	428a      	cmp	r2, r1
 800391e:	d101      	bne.n	8003924 <HAL_I2S_Init+0x1b8>
 8003920:	4a31      	ldr	r2, [pc, #196]	; (80039e8 <HAL_I2S_Init+0x27c>)
 8003922:	e001      	b.n	8003928 <HAL_I2S_Init+0x1bc>
 8003924:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003928:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800392c:	f023 030f 	bic.w	r3, r3, #15
 8003930:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2b      	ldr	r2, [pc, #172]	; (80039e4 <HAL_I2S_Init+0x278>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_I2S_Init+0x1d4>
 800393c:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_I2S_Init+0x27c>)
 800393e:	e001      	b.n	8003944 <HAL_I2S_Init+0x1d8>
 8003940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003944:	2202      	movs	r2, #2
 8003946:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <HAL_I2S_Init+0x278>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_I2S_Init+0x1ea>
 8003952:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <HAL_I2S_Init+0x27c>)
 8003954:	e001      	b.n	800395a <HAL_I2S_Init+0x1ee>
 8003956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003966:	d003      	beq.n	8003970 <HAL_I2S_Init+0x204>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d103      	bne.n	8003978 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e001      	b.n	800397c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003978:	2300      	movs	r3, #0
 800397a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003986:	4313      	orrs	r3, r2
 8003988:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003990:	4313      	orrs	r3, r2
 8003992:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800399a:	4313      	orrs	r3, r2
 800399c:	b29a      	uxth	r2, r3
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a0d      	ldr	r2, [pc, #52]	; (80039e4 <HAL_I2S_Init+0x278>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_I2S_Init+0x24c>
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <HAL_I2S_Init+0x27c>)
 80039b6:	e001      	b.n	80039bc <HAL_I2S_Init+0x250>
 80039b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039bc:	897a      	ldrh	r2, [r7, #10]
 80039be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	08003ae3 	.word	0x08003ae3
 80039dc:	cccccccd 	.word	0xcccccccd
 80039e0:	08003bf9 	.word	0x08003bf9
 80039e4:	40003800 	.word	0x40003800
 80039e8:	40003400 	.word	0x40003400

080039ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10e      	bne.n	8003a7c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a6c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ffb8 	bl	80039ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	b292      	uxth	r2, r2
 8003a98:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	1c9a      	adds	r2, r3, #2
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10e      	bne.n	8003ada <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff ff93 	bl	8003a00 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b086      	sub	sp, #24
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d13a      	bne.n	8003b74 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d109      	bne.n	8003b1c <I2S_IRQHandler+0x3a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d102      	bne.n	8003b1c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ffb4 	bl	8003a84 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d126      	bne.n	8003b74 <I2S_IRQHandler+0x92>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d11f      	bne.n	8003b74 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f043 0202 	orr.w	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ff50 	bl	8003a14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d136      	bne.n	8003bee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d109      	bne.n	8003b9e <I2S_IRQHandler+0xbc>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d102      	bne.n	8003b9e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff ff45 	bl	8003a28 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d122      	bne.n	8003bee <I2S_IRQHandler+0x10c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d11b      	bne.n	8003bee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bc4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ff13 	bl	8003a14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bee:	bf00      	nop
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a92      	ldr	r2, [pc, #584]	; (8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d101      	bne.n	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c12:	4b92      	ldr	r3, [pc, #584]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c14:	e001      	b.n	8003c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a8b      	ldr	r2, [pc, #556]	; (8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d101      	bne.n	8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c30:	4b8a      	ldr	r3, [pc, #552]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c32:	e001      	b.n	8003c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c44:	d004      	beq.n	8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 8099 	bne.w	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d107      	bne.n	8003c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f925 	bl	8003eb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9c8 	bl	8004014 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d13a      	bne.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d035      	beq.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6e      	ldr	r2, [pc, #440]	; (8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ca2:	4b6e      	ldr	r3, [pc, #440]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ca4:	e001      	b.n	8003caa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4969      	ldr	r1, [pc, #420]	; (8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cb2:	428b      	cmp	r3, r1
 8003cb4:	d101      	bne.n	8003cba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003cb6:	4b69      	ldr	r3, [pc, #420]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cb8:	e001      	b.n	8003cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f043 0202 	orr.w	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fe88 	bl	8003a14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	f040 80c3 	bne.w	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80bd 	beq.w	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a49      	ldr	r2, [pc, #292]	; (8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d36:	4b49      	ldr	r3, [pc, #292]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d38:	e001      	b.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4944      	ldr	r1, [pc, #272]	; (8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d46:	428b      	cmp	r3, r1
 8003d48:	d101      	bne.n	8003d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d4a:	4b44      	ldr	r3, [pc, #272]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d4c:	e001      	b.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f043 0204 	orr.w	r2, r3, #4
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fe4a 	bl	8003a14 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d80:	e089      	b.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d107      	bne.n	8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f8be 	bl	8003f18 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d107      	bne.n	8003db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f8fd 	bl	8003fb0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d12f      	bne.n	8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d02a      	beq.n	8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003de4:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003de6:	e001      	b.n	8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4919      	ldr	r1, [pc, #100]	; (8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003df4:	428b      	cmp	r3, r1
 8003df6:	d101      	bne.n	8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003df8:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dfa:	e001      	b.n	8003e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003dfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f043 0202 	orr.w	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fdfa 	bl	8003a14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d136      	bne.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d031      	beq.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a07      	ldr	r2, [pc, #28]	; (8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e40:	e001      	b.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4902      	ldr	r1, [pc, #8]	; (8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e4e:	428b      	cmp	r3, r1
 8003e50:	d106      	bne.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003e52:	4b02      	ldr	r3, [pc, #8]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e54:	e006      	b.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003e56:	bf00      	nop
 8003e58:	40003800 	.word	0x40003800
 8003e5c:	40003400 	.word	0x40003400
 8003e60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e68:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fdc0 	bl	8003a14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e94:	e000      	b.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e96:	bf00      	nop
}
 8003e98:	bf00      	nop
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	1c99      	adds	r1, r3, #2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d113      	bne.n	8003f0e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ef4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ffc9 	bl	8003ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	1c99      	adds	r1, r3, #2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6251      	str	r1, [r2, #36]	; 0x24
 8003f2a:	8819      	ldrh	r1, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <I2SEx_TxISR_I2SExt+0x22>
 8003f36:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <I2SEx_TxISR_I2SExt+0x94>)
 8003f38:	e001      	b.n	8003f3e <I2SEx_TxISR_I2SExt+0x26>
 8003f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3e:	460a      	mov	r2, r1
 8003f40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d121      	bne.n	8003f9e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d101      	bne.n	8003f68 <I2SEx_TxISR_I2SExt+0x50>
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <I2SEx_TxISR_I2SExt+0x94>)
 8003f66:	e001      	b.n	8003f6c <I2SEx_TxISR_I2SExt+0x54>
 8003f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	490d      	ldr	r1, [pc, #52]	; (8003fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8003f74:	428b      	cmp	r3, r1
 8003f76:	d101      	bne.n	8003f7c <I2SEx_TxISR_I2SExt+0x64>
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <I2SEx_TxISR_I2SExt+0x94>)
 8003f7a:	e001      	b.n	8003f80 <I2SEx_TxISR_I2SExt+0x68>
 8003f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff ff81 	bl	8003ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40003800 	.word	0x40003800
 8003fac:	40003400 	.word	0x40003400

08003fb0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68d8      	ldr	r0, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	1c99      	adds	r1, r3, #2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fc8:	b282      	uxth	r2, r0
 8003fca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d113      	bne.n	800400c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ff2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ff4a 	bl	8003ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <I2SEx_RxISR_I2SExt+0x90>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <I2SEx_RxISR_I2SExt+0x16>
 8004026:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <I2SEx_RxISR_I2SExt+0x94>)
 8004028:	e001      	b.n	800402e <I2SEx_RxISR_I2SExt+0x1a>
 800402a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402e:	68d8      	ldr	r0, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	1c99      	adds	r1, r3, #2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	62d1      	str	r1, [r2, #44]	; 0x2c
 800403a:	b282      	uxth	r2, r0
 800403c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d121      	bne.n	800409a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <I2SEx_RxISR_I2SExt+0x90>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d101      	bne.n	8004064 <I2SEx_RxISR_I2SExt+0x50>
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <I2SEx_RxISR_I2SExt+0x94>)
 8004062:	e001      	b.n	8004068 <I2SEx_RxISR_I2SExt+0x54>
 8004064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	490d      	ldr	r1, [pc, #52]	; (80040a4 <I2SEx_RxISR_I2SExt+0x90>)
 8004070:	428b      	cmp	r3, r1
 8004072:	d101      	bne.n	8004078 <I2SEx_RxISR_I2SExt+0x64>
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <I2SEx_RxISR_I2SExt+0x94>)
 8004076:	e001      	b.n	800407c <I2SEx_RxISR_I2SExt+0x68>
 8004078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800407c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004080:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ff03 	bl	8003ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40003800 	.word	0x40003800
 80040a8:	40003400 	.word	0x40003400

080040ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e267      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d075      	beq.n	80041b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ca:	4b88      	ldr	r3, [pc, #544]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d00c      	beq.n	80040f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d6:	4b85      	ldr	r3, [pc, #532]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d112      	bne.n	8004108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e2:	4b82      	ldr	r3, [pc, #520]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ee:	d10b      	bne.n	8004108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f0:	4b7e      	ldr	r3, [pc, #504]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d05b      	beq.n	80041b4 <HAL_RCC_OscConfig+0x108>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d157      	bne.n	80041b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e242      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d106      	bne.n	8004120 <HAL_RCC_OscConfig+0x74>
 8004112:	4b76      	ldr	r3, [pc, #472]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a75      	ldr	r2, [pc, #468]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e01d      	b.n	800415c <HAL_RCC_OscConfig+0xb0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0x98>
 800412a:	4b70      	ldr	r3, [pc, #448]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a6f      	ldr	r2, [pc, #444]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b6d      	ldr	r3, [pc, #436]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a6c      	ldr	r2, [pc, #432]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0xb0>
 8004144:	4b69      	ldr	r3, [pc, #420]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a68      	ldr	r2, [pc, #416]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800414a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b66      	ldr	r3, [pc, #408]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a65      	ldr	r2, [pc, #404]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7fc ffd2 	bl	800110c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800416c:	f7fc ffce 	bl	800110c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e207      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b5b      	ldr	r3, [pc, #364]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0xc0>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fc ffbe 	bl	800110c <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004194:	f7fc ffba 	bl	800110c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e1f3      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	4b51      	ldr	r3, [pc, #324]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0xe8>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d063      	beq.n	800428a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041c2:	4b4a      	ldr	r3, [pc, #296]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b47      	ldr	r3, [pc, #284]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d11c      	bne.n	8004214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041da:	4b44      	ldr	r3, [pc, #272]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d116      	bne.n	8004214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	4b41      	ldr	r3, [pc, #260]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_RCC_OscConfig+0x152>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d001      	beq.n	80041fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e1c7      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fe:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4937      	ldr	r1, [pc, #220]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004212:	e03a      	b.n	800428a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d020      	beq.n	800425e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800421c:	4b34      	ldr	r3, [pc, #208]	; (80042f0 <HAL_RCC_OscConfig+0x244>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004222:	f7fc ff73 	bl	800110c <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422a:	f7fc ff6f 	bl	800110c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e1a8      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423c:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004248:	4b28      	ldr	r3, [pc, #160]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4925      	ldr	r1, [pc, #148]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]
 800425c:	e015      	b.n	800428a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <HAL_RCC_OscConfig+0x244>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fc ff52 	bl	800110c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800426c:	f7fc ff4e 	bl	800110c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e187      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d036      	beq.n	8004304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d016      	beq.n	80042cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <HAL_RCC_OscConfig+0x248>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7fc ff32 	bl	800110c <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ac:	f7fc ff2e 	bl	800110c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e167      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_OscConfig+0x240>)
 80042c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x200>
 80042ca:	e01b      	b.n	8004304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCC_OscConfig+0x248>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d2:	f7fc ff1b 	bl	800110c <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d8:	e00e      	b.n	80042f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042da:	f7fc ff17 	bl	800110c <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d907      	bls.n	80042f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e150      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
 80042ec:	40023800 	.word	0x40023800
 80042f0:	42470000 	.word	0x42470000
 80042f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f8:	4b88      	ldr	r3, [pc, #544]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80042fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1ea      	bne.n	80042da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8097 	beq.w	8004440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004312:	2300      	movs	r3, #0
 8004314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004316:	4b81      	ldr	r3, [pc, #516]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	4b7d      	ldr	r3, [pc, #500]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	4a7c      	ldr	r2, [pc, #496]	; (800451c <HAL_RCC_OscConfig+0x470>)
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004330:	6413      	str	r3, [r2, #64]	; 0x40
 8004332:	4b7a      	ldr	r3, [pc, #488]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433e:	2301      	movs	r3, #1
 8004340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004342:	4b77      	ldr	r3, [pc, #476]	; (8004520 <HAL_RCC_OscConfig+0x474>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d118      	bne.n	8004380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434e:	4b74      	ldr	r3, [pc, #464]	; (8004520 <HAL_RCC_OscConfig+0x474>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a73      	ldr	r2, [pc, #460]	; (8004520 <HAL_RCC_OscConfig+0x474>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435a:	f7fc fed7 	bl	800110c <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004362:	f7fc fed3 	bl	800110c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e10c      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004374:	4b6a      	ldr	r3, [pc, #424]	; (8004520 <HAL_RCC_OscConfig+0x474>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d106      	bne.n	8004396 <HAL_RCC_OscConfig+0x2ea>
 8004388:	4b64      	ldr	r3, [pc, #400]	; (800451c <HAL_RCC_OscConfig+0x470>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	4a63      	ldr	r2, [pc, #396]	; (800451c <HAL_RCC_OscConfig+0x470>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6713      	str	r3, [r2, #112]	; 0x70
 8004394:	e01c      	b.n	80043d0 <HAL_RCC_OscConfig+0x324>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b05      	cmp	r3, #5
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x30c>
 800439e:	4b5f      	ldr	r3, [pc, #380]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a5e      	ldr	r2, [pc, #376]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043a4:	f043 0304 	orr.w	r3, r3, #4
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
 80043aa:	4b5c      	ldr	r3, [pc, #368]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a5b      	ldr	r2, [pc, #364]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0x324>
 80043b8:	4b58      	ldr	r3, [pc, #352]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a57      	ldr	r2, [pc, #348]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
 80043c4:	4b55      	ldr	r3, [pc, #340]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	4a54      	ldr	r2, [pc, #336]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043ca:	f023 0304 	bic.w	r3, r3, #4
 80043ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fc fe98 	bl	800110c <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fc fe94 	bl	800110c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e0cb      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f6:	4b49      	ldr	r3, [pc, #292]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0ee      	beq.n	80043e0 <HAL_RCC_OscConfig+0x334>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004404:	f7fc fe82 	bl	800110c <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440a:	e00a      	b.n	8004422 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440c:	f7fc fe7e 	bl	800110c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f241 3288 	movw	r2, #5000	; 0x1388
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e0b5      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004422:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ee      	bne.n	800440c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004434:	4b39      	ldr	r3, [pc, #228]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	4a38      	ldr	r2, [pc, #224]	; (800451c <HAL_RCC_OscConfig+0x470>)
 800443a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a1 	beq.w	800458c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800444a:	4b34      	ldr	r3, [pc, #208]	; (800451c <HAL_RCC_OscConfig+0x470>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b08      	cmp	r3, #8
 8004454:	d05c      	beq.n	8004510 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d141      	bne.n	80044e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445e:	4b31      	ldr	r3, [pc, #196]	; (8004524 <HAL_RCC_OscConfig+0x478>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fc fe52 	bl	800110c <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446c:	f7fc fe4e 	bl	800110c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e087      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	4b27      	ldr	r3, [pc, #156]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	019b      	lsls	r3, r3, #6
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	3b01      	subs	r3, #1
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	491b      	ldr	r1, [pc, #108]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCC_OscConfig+0x478>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fc fe27 	bl	800110c <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fc fe23 	bl	800110c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e05c      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_RCC_OscConfig+0x470>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x416>
 80044e0:	e054      	b.n	800458c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_RCC_OscConfig+0x478>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fc fe10 	bl	800110c <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fc fe0c 	bl	800110c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e045      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCC_OscConfig+0x470>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x444>
 800450e:	e03d      	b.n	800458c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e038      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
 800451c:	40023800 	.word	0x40023800
 8004520:	40007000 	.word	0x40007000
 8004524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x4ec>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d028      	beq.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d121      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d11a      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004558:	4013      	ands	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800455e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004560:	4293      	cmp	r3, r2
 8004562:	d111      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	3b01      	subs	r3, #1
 8004572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800

0800459c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0cc      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045b0:	4b68      	ldr	r3, [pc, #416]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d90c      	bls.n	80045d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b65      	ldr	r3, [pc, #404]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c6:	4b63      	ldr	r3, [pc, #396]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d001      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0b8      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d020      	beq.n	8004626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f0:	4b59      	ldr	r3, [pc, #356]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4a58      	ldr	r2, [pc, #352]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004608:	4b53      	ldr	r3, [pc, #332]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a52      	ldr	r2, [pc, #328]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004614:	4b50      	ldr	r3, [pc, #320]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	494d      	ldr	r1, [pc, #308]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d044      	beq.n	80046bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463a:	4b47      	ldr	r3, [pc, #284]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d119      	bne.n	800467a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e07f      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d003      	beq.n	800465a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004656:	2b03      	cmp	r3, #3
 8004658:	d107      	bne.n	800466a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465a:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e06f      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e067      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467a:	4b37      	ldr	r3, [pc, #220]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f023 0203 	bic.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	4934      	ldr	r1, [pc, #208]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800468c:	f7fc fd3e 	bl	800110c <HAL_GetTick>
 8004690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	e00a      	b.n	80046aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7fc fd3a 	bl	800110c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e04f      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	4b2b      	ldr	r3, [pc, #172]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 020c 	and.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d1eb      	bne.n	8004694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046bc:	4b25      	ldr	r3, [pc, #148]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d20c      	bcs.n	80046e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b22      	ldr	r3, [pc, #136]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b20      	ldr	r3, [pc, #128]	; (8004754 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e032      	b.n	800474a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4916      	ldr	r1, [pc, #88]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	490e      	ldr	r1, [pc, #56]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004722:	f000 f889 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 8004726:	4602      	mov	r2, r0
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	490a      	ldr	r1, [pc, #40]	; (800475c <HAL_RCC_ClockConfig+0x1c0>)
 8004734:	5ccb      	ldrb	r3, [r1, r3]
 8004736:	fa22 f303 	lsr.w	r3, r2, r3
 800473a:	4a09      	ldr	r2, [pc, #36]	; (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fc fc9e 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40023c00 	.word	0x40023c00
 8004758:	40023800 	.word	0x40023800
 800475c:	08009950 	.word	0x08009950
 8004760:	20000000 	.word	0x20000000
 8004764:	20000004 	.word	0x20000004

08004768 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d129      	bne.n	80047ce <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	4b2b      	ldr	r3, [pc, #172]	; (800482c <HAL_RCC_MCOConfig+0xc4>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	4a2a      	ldr	r2, [pc, #168]	; (800482c <HAL_RCC_MCOConfig+0xc4>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6313      	str	r3, [r2, #48]	; 0x30
 800478a:	4b28      	ldr	r3, [pc, #160]	; (800482c <HAL_RCC_MCOConfig+0xc4>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800479a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479c:	2302      	movs	r3, #2
 800479e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a0:	2303      	movs	r3, #3
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80047a8:	2300      	movs	r3, #0
 80047aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80047ac:	f107 031c 	add.w	r3, r7, #28
 80047b0:	4619      	mov	r1, r3
 80047b2:	481f      	ldr	r0, [pc, #124]	; (8004830 <HAL_RCC_MCOConfig+0xc8>)
 80047b4:	f7fd f8d6 	bl	8001964 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80047b8:	4b1c      	ldr	r3, [pc, #112]	; (800482c <HAL_RCC_MCOConfig+0xc4>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	430b      	orrs	r3, r1
 80047c6:	4919      	ldr	r1, [pc, #100]	; (800482c <HAL_RCC_MCOConfig+0xc4>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80047cc:	e029      	b.n	8004822 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	4b16      	ldr	r3, [pc, #88]	; (800482c <HAL_RCC_MCOConfig+0xc4>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	4a15      	ldr	r2, [pc, #84]	; (800482c <HAL_RCC_MCOConfig+0xc4>)
 80047d8:	f043 0304 	orr.w	r3, r3, #4
 80047dc:	6313      	str	r3, [r2, #48]	; 0x30
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <HAL_RCC_MCOConfig+0xc4>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80047ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f0:	2302      	movs	r3, #2
 80047f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f4:	2303      	movs	r3, #3
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80047fc:	2300      	movs	r3, #0
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004800:	f107 031c 	add.w	r3, r7, #28
 8004804:	4619      	mov	r1, r3
 8004806:	480b      	ldr	r0, [pc, #44]	; (8004834 <HAL_RCC_MCOConfig+0xcc>)
 8004808:	f7fd f8ac 	bl	8001964 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800480c:	4b07      	ldr	r3, [pc, #28]	; (800482c <HAL_RCC_MCOConfig+0xc4>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	00d9      	lsls	r1, r3, #3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	430b      	orrs	r3, r1
 800481c:	4903      	ldr	r1, [pc, #12]	; (800482c <HAL_RCC_MCOConfig+0xc4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
}
 8004822:	bf00      	nop
 8004824:	3730      	adds	r7, #48	; 0x30
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800
 8004830:	40020000 	.word	0x40020000
 8004834:	40020800 	.word	0x40020800

08004838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800483c:	b094      	sub	sp, #80	; 0x50
 800483e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	647b      	str	r3, [r7, #68]	; 0x44
 8004844:	2300      	movs	r3, #0
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004848:	2300      	movs	r3, #0
 800484a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004850:	4b79      	ldr	r3, [pc, #484]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d00d      	beq.n	8004878 <HAL_RCC_GetSysClockFreq+0x40>
 800485c:	2b08      	cmp	r3, #8
 800485e:	f200 80e1 	bhi.w	8004a24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0x34>
 8004866:	2b04      	cmp	r3, #4
 8004868:	d003      	beq.n	8004872 <HAL_RCC_GetSysClockFreq+0x3a>
 800486a:	e0db      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800486c:	4b73      	ldr	r3, [pc, #460]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x204>)
 800486e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004870:	e0db      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004872:	4b73      	ldr	r3, [pc, #460]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x208>)
 8004874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004876:	e0d8      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004878:	4b6f      	ldr	r3, [pc, #444]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004880:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004882:	4b6d      	ldr	r3, [pc, #436]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d063      	beq.n	8004956 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488e:	4b6a      	ldr	r3, [pc, #424]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	099b      	lsrs	r3, r3, #6
 8004894:	2200      	movs	r2, #0
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
 8004898:	63fa      	str	r2, [r7, #60]	; 0x3c
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a0:	633b      	str	r3, [r7, #48]	; 0x30
 80048a2:	2300      	movs	r3, #0
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
 80048a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048aa:	4622      	mov	r2, r4
 80048ac:	462b      	mov	r3, r5
 80048ae:	f04f 0000 	mov.w	r0, #0
 80048b2:	f04f 0100 	mov.w	r1, #0
 80048b6:	0159      	lsls	r1, r3, #5
 80048b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048bc:	0150      	lsls	r0, r2, #5
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4621      	mov	r1, r4
 80048c4:	1a51      	subs	r1, r2, r1
 80048c6:	6139      	str	r1, [r7, #16]
 80048c8:	4629      	mov	r1, r5
 80048ca:	eb63 0301 	sbc.w	r3, r3, r1
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048dc:	4659      	mov	r1, fp
 80048de:	018b      	lsls	r3, r1, #6
 80048e0:	4651      	mov	r1, sl
 80048e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048e6:	4651      	mov	r1, sl
 80048e8:	018a      	lsls	r2, r1, #6
 80048ea:	4651      	mov	r1, sl
 80048ec:	ebb2 0801 	subs.w	r8, r2, r1
 80048f0:	4659      	mov	r1, fp
 80048f2:	eb63 0901 	sbc.w	r9, r3, r1
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800490a:	4690      	mov	r8, r2
 800490c:	4699      	mov	r9, r3
 800490e:	4623      	mov	r3, r4
 8004910:	eb18 0303 	adds.w	r3, r8, r3
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	462b      	mov	r3, r5
 8004918:	eb49 0303 	adc.w	r3, r9, r3
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800492a:	4629      	mov	r1, r5
 800492c:	024b      	lsls	r3, r1, #9
 800492e:	4621      	mov	r1, r4
 8004930:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004934:	4621      	mov	r1, r4
 8004936:	024a      	lsls	r2, r1, #9
 8004938:	4610      	mov	r0, r2
 800493a:	4619      	mov	r1, r3
 800493c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493e:	2200      	movs	r2, #0
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004948:	f7fb fc3e 	bl	80001c8 <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4613      	mov	r3, r2
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004954:	e058      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004956:	4b38      	ldr	r3, [pc, #224]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	2200      	movs	r2, #0
 800495e:	4618      	mov	r0, r3
 8004960:	4611      	mov	r1, r2
 8004962:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004966:	623b      	str	r3, [r7, #32]
 8004968:	2300      	movs	r3, #0
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
 800496c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004970:	4642      	mov	r2, r8
 8004972:	464b      	mov	r3, r9
 8004974:	f04f 0000 	mov.w	r0, #0
 8004978:	f04f 0100 	mov.w	r1, #0
 800497c:	0159      	lsls	r1, r3, #5
 800497e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004982:	0150      	lsls	r0, r2, #5
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4641      	mov	r1, r8
 800498a:	ebb2 0a01 	subs.w	sl, r2, r1
 800498e:	4649      	mov	r1, r9
 8004990:	eb63 0b01 	sbc.w	fp, r3, r1
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049a8:	ebb2 040a 	subs.w	r4, r2, sl
 80049ac:	eb63 050b 	sbc.w	r5, r3, fp
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	00eb      	lsls	r3, r5, #3
 80049ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049be:	00e2      	lsls	r2, r4, #3
 80049c0:	4614      	mov	r4, r2
 80049c2:	461d      	mov	r5, r3
 80049c4:	4643      	mov	r3, r8
 80049c6:	18e3      	adds	r3, r4, r3
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	464b      	mov	r3, r9
 80049cc:	eb45 0303 	adc.w	r3, r5, r3
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049de:	4629      	mov	r1, r5
 80049e0:	028b      	lsls	r3, r1, #10
 80049e2:	4621      	mov	r1, r4
 80049e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049e8:	4621      	mov	r1, r4
 80049ea:	028a      	lsls	r2, r1, #10
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f2:	2200      	movs	r2, #0
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	61fa      	str	r2, [r7, #28]
 80049f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049fc:	f7fb fbe4 	bl	80001c8 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4613      	mov	r3, r2
 8004a06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	3301      	adds	r3, #1
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3750      	adds	r7, #80	; 0x50
 8004a30:	46bd      	mov	sp, r7
 8004a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	00f42400 	.word	0x00f42400
 8004a40:	007a1200 	.word	0x007a1200

08004a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000000 	.word	0x20000000

08004a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a60:	f7ff fff0 	bl	8004a44 <HAL_RCC_GetHCLKFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	0a9b      	lsrs	r3, r3, #10
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a72:	5ccb      	ldrb	r3, [r1, r3]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	08009960 	.word	0x08009960

08004a84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d035      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aac:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab2:	f7fc fb2b 	bl	800110c <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aba:	f7fc fb27 	bl	800110c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e0b0      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004acc:	4b5b      	ldr	r3, [pc, #364]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	019a      	lsls	r2, r3, #6
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	071b      	lsls	r3, r3, #28
 8004ae4:	4955      	ldr	r1, [pc, #340]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aec:	4b52      	ldr	r3, [pc, #328]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004af2:	f7fc fb0b 	bl	800110c <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004afa:	f7fc fb07 	bl	800110c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e090      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b0c:	4b4b      	ldr	r3, [pc, #300]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8083 	beq.w	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	4b44      	ldr	r3, [pc, #272]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	4a43      	ldr	r2, [pc, #268]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6413      	str	r3, [r2, #64]	; 0x40
 8004b36:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b42:	4b3f      	ldr	r3, [pc, #252]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a3e      	ldr	r2, [pc, #248]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b4e:	f7fc fadd 	bl	800110c <HAL_GetTick>
 8004b52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fc fad9 	bl	800110c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e062      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b68:	4b35      	ldr	r3, [pc, #212]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b74:	4b31      	ldr	r3, [pc, #196]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d02f      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d028      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b92:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b9c:	4b29      	ldr	r3, [pc, #164]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba2:	4b28      	ldr	r3, [pc, #160]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ba8:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d114      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bba:	f7fc faa7 	bl	800110c <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc0:	e00a      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fc faa3 	bl	800110c <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e02a      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd8:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0ee      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf0:	d10d      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c06:	490d      	ldr	r1, [pc, #52]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	608b      	str	r3, [r1, #8]
 8004c0c:	e005      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c18:	6093      	str	r3, [r2, #8]
 8004c1a:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c26:	4905      	ldr	r1, [pc, #20]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	42470068 	.word	0x42470068
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40007000 	.word	0x40007000
 8004c44:	42470e40 	.word	0x42470e40

08004c48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d13e      	bne.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d12f      	bne.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c7c:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c7e:	617b      	str	r3, [r7, #20]
          break;
 8004c80:	e02f      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c82:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c8e:	d108      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c90:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c98:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	e007      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ca2:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004caa:	4a15      	ldr	r2, [pc, #84]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb8:	099b      	lsrs	r3, r3, #6
 8004cba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	fb02 f303 	mul.w	r3, r2, r3
 8004cc4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ccc:	0f1b      	lsrs	r3, r3, #28
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	617b      	str	r3, [r7, #20]
          break;
 8004cda:	e002      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
          break;
 8004ce0:	bf00      	nop
        }
      }
      break;
 8004ce2:	bf00      	nop
    }
  }
  return frequency;
 8004ce4:	697b      	ldr	r3, [r7, #20]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	00bb8000 	.word	0x00bb8000
 8004cfc:	007a1200 	.word	0x007a1200
 8004d00:	00f42400 	.word	0x00f42400

08004d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07b      	b.n	8004e0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d26:	d009      	beq.n	8004d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	61da      	str	r2, [r3, #28]
 8004d2e:	e005      	b.n	8004d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fb ffe4 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc0:	ea42 0103 	orr.w	r1, r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	f003 0104 	and.w	r1, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f003 0210 	and.w	r2, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e041      	b.n	8004eac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7fb ffb9 	bl	8000db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2202      	movs	r2, #2
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f000 fda5 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e041      	b.n	8004f4a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f839 	bl	8004f52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f000 fd56 	bl	80059a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <HAL_TIM_IC_Start+0x1a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	e013      	b.n	8004faa <HAL_TIM_IC_Start+0x42>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d104      	bne.n	8004f92 <HAL_TIM_IC_Start+0x2a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	e00b      	b.n	8004faa <HAL_TIM_IC_Start+0x42>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_IC_Start+0x3a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e003      	b.n	8004faa <HAL_TIM_IC_Start+0x42>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <HAL_TIM_IC_Start+0x54>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e013      	b.n	8004fe4 <HAL_TIM_IC_Start+0x7c>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d104      	bne.n	8004fcc <HAL_TIM_IC_Start+0x64>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e00b      	b.n	8004fe4 <HAL_TIM_IC_Start+0x7c>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d104      	bne.n	8004fdc <HAL_TIM_IC_Start+0x74>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	e003      	b.n	8004fe4 <HAL_TIM_IC_Start+0x7c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d102      	bne.n	8004ff2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d001      	beq.n	8004ff6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e081      	b.n	80050fa <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_IC_Start+0x9e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005004:	e013      	b.n	800502e <HAL_TIM_IC_Start+0xc6>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b04      	cmp	r3, #4
 800500a:	d104      	bne.n	8005016 <HAL_TIM_IC_Start+0xae>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005014:	e00b      	b.n	800502e <HAL_TIM_IC_Start+0xc6>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d104      	bne.n	8005026 <HAL_TIM_IC_Start+0xbe>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005024:	e003      	b.n	800502e <HAL_TIM_IC_Start+0xc6>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <HAL_TIM_IC_Start+0xd6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800503c:	e013      	b.n	8005066 <HAL_TIM_IC_Start+0xfe>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b04      	cmp	r3, #4
 8005042:	d104      	bne.n	800504e <HAL_TIM_IC_Start+0xe6>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800504c:	e00b      	b.n	8005066 <HAL_TIM_IC_Start+0xfe>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d104      	bne.n	800505e <HAL_TIM_IC_Start+0xf6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800505c:	e003      	b.n	8005066 <HAL_TIM_IC_Start+0xfe>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2201      	movs	r2, #1
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 ff8e 	bl	8005f90 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a22      	ldr	r2, [pc, #136]	; (8005104 <HAL_TIM_IC_Start+0x19c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d022      	beq.n	80050c4 <HAL_TIM_IC_Start+0x15c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005086:	d01d      	beq.n	80050c4 <HAL_TIM_IC_Start+0x15c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <HAL_TIM_IC_Start+0x1a0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d018      	beq.n	80050c4 <HAL_TIM_IC_Start+0x15c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1d      	ldr	r2, [pc, #116]	; (800510c <HAL_TIM_IC_Start+0x1a4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <HAL_TIM_IC_Start+0x15c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <HAL_TIM_IC_Start+0x1a8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <HAL_TIM_IC_Start+0x15c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1a      	ldr	r2, [pc, #104]	; (8005114 <HAL_TIM_IC_Start+0x1ac>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_TIM_IC_Start+0x15c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a18      	ldr	r2, [pc, #96]	; (8005118 <HAL_TIM_IC_Start+0x1b0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIM_IC_Start+0x15c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a17      	ldr	r2, [pc, #92]	; (800511c <HAL_TIM_IC_Start+0x1b4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d111      	bne.n	80050e8 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d010      	beq.n	80050f8 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	e007      	b.n	80050f8 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40010000 	.word	0x40010000
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40000c00 	.word	0x40000c00
 8005114:	40010400 	.word	0x40010400
 8005118:	40014000 	.word	0x40014000
 800511c:	40001800 	.word	0x40001800

08005120 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_TIM_IC_Start_IT+0x1e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e013      	b.n	8005166 <HAL_TIM_IC_Start_IT+0x46>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d104      	bne.n	800514e <HAL_TIM_IC_Start_IT+0x2e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800514a:	b2db      	uxtb	r3, r3
 800514c:	e00b      	b.n	8005166 <HAL_TIM_IC_Start_IT+0x46>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d104      	bne.n	800515e <HAL_TIM_IC_Start_IT+0x3e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e003      	b.n	8005166 <HAL_TIM_IC_Start_IT+0x46>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005164:	b2db      	uxtb	r3, r3
 8005166:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <HAL_TIM_IC_Start_IT+0x58>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e013      	b.n	80051a0 <HAL_TIM_IC_Start_IT+0x80>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b04      	cmp	r3, #4
 800517c:	d104      	bne.n	8005188 <HAL_TIM_IC_Start_IT+0x68>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e00b      	b.n	80051a0 <HAL_TIM_IC_Start_IT+0x80>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b08      	cmp	r3, #8
 800518c:	d104      	bne.n	8005198 <HAL_TIM_IC_Start_IT+0x78>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005194:	b2db      	uxtb	r3, r3
 8005196:	e003      	b.n	80051a0 <HAL_TIM_IC_Start_IT+0x80>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80051a2:	7bbb      	ldrb	r3, [r7, #14]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d102      	bne.n	80051ae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80051a8:	7b7b      	ldrb	r3, [r7, #13]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d001      	beq.n	80051b2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0cc      	b.n	800534c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_IC_Start_IT+0xa2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c0:	e013      	b.n	80051ea <HAL_TIM_IC_Start_IT+0xca>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_IC_Start_IT+0xb2>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d0:	e00b      	b.n	80051ea <HAL_TIM_IC_Start_IT+0xca>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_IC_Start_IT+0xc2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e0:	e003      	b.n	80051ea <HAL_TIM_IC_Start_IT+0xca>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_IC_Start_IT+0xda>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f8:	e013      	b.n	8005222 <HAL_TIM_IC_Start_IT+0x102>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d104      	bne.n	800520a <HAL_TIM_IC_Start_IT+0xea>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005208:	e00b      	b.n	8005222 <HAL_TIM_IC_Start_IT+0x102>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d104      	bne.n	800521a <HAL_TIM_IC_Start_IT+0xfa>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005218:	e003      	b.n	8005222 <HAL_TIM_IC_Start_IT+0x102>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b0c      	cmp	r3, #12
 8005226:	d841      	bhi.n	80052ac <HAL_TIM_IC_Start_IT+0x18c>
 8005228:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <HAL_TIM_IC_Start_IT+0x110>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005265 	.word	0x08005265
 8005234:	080052ad 	.word	0x080052ad
 8005238:	080052ad 	.word	0x080052ad
 800523c:	080052ad 	.word	0x080052ad
 8005240:	08005277 	.word	0x08005277
 8005244:	080052ad 	.word	0x080052ad
 8005248:	080052ad 	.word	0x080052ad
 800524c:	080052ad 	.word	0x080052ad
 8005250:	08005289 	.word	0x08005289
 8005254:	080052ad 	.word	0x080052ad
 8005258:	080052ad 	.word	0x080052ad
 800525c:	080052ad 	.word	0x080052ad
 8005260:	0800529b 	.word	0x0800529b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0202 	orr.w	r2, r2, #2
 8005272:	60da      	str	r2, [r3, #12]
      break;
 8005274:	e01d      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0204 	orr.w	r2, r2, #4
 8005284:	60da      	str	r2, [r3, #12]
      break;
 8005286:	e014      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0208 	orr.w	r2, r2, #8
 8005296:	60da      	str	r2, [r3, #12]
      break;
 8005298:	e00b      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0210 	orr.w	r2, r2, #16
 80052a8:	60da      	str	r2, [r3, #12]
      break;
 80052aa:	e002      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      break;
 80052b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d148      	bne.n	800534a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2201      	movs	r2, #1
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fe65 	bl	8005f90 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a22      	ldr	r2, [pc, #136]	; (8005354 <HAL_TIM_IC_Start_IT+0x234>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d022      	beq.n	8005316 <HAL_TIM_IC_Start_IT+0x1f6>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d01d      	beq.n	8005316 <HAL_TIM_IC_Start_IT+0x1f6>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <HAL_TIM_IC_Start_IT+0x238>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d018      	beq.n	8005316 <HAL_TIM_IC_Start_IT+0x1f6>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1c      	ldr	r2, [pc, #112]	; (800535c <HAL_TIM_IC_Start_IT+0x23c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_TIM_IC_Start_IT+0x1f6>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <HAL_TIM_IC_Start_IT+0x240>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_TIM_IC_Start_IT+0x1f6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a19      	ldr	r2, [pc, #100]	; (8005364 <HAL_TIM_IC_Start_IT+0x244>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_TIM_IC_Start_IT+0x1f6>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a18      	ldr	r2, [pc, #96]	; (8005368 <HAL_TIM_IC_Start_IT+0x248>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_TIM_IC_Start_IT+0x1f6>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a16      	ldr	r2, [pc, #88]	; (800536c <HAL_TIM_IC_Start_IT+0x24c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d111      	bne.n	800533a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b06      	cmp	r3, #6
 8005326:	d010      	beq.n	800534a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	e007      	b.n	800534a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40010000 	.word	0x40010000
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	40010400 	.word	0x40010400
 8005368:	40014000 	.word	0x40014000
 800536c:	40001800 	.word	0x40001800

08005370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b02      	cmp	r3, #2
 8005384:	d122      	bne.n	80053cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b02      	cmp	r3, #2
 8005392:	d11b      	bne.n	80053cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0202 	mvn.w	r2, #2
 800539c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fb f88a 	bl	80004cc <HAL_TIM_IC_CaptureCallback>
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fad4 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fadb 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d122      	bne.n	8005420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d11b      	bne.n	8005420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0204 	mvn.w	r2, #4
 80053f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fb f860 	bl	80004cc <HAL_TIM_IC_CaptureCallback>
 800540c:	e005      	b.n	800541a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 faaa 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fab1 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b08      	cmp	r3, #8
 800542c:	d122      	bne.n	8005474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b08      	cmp	r3, #8
 800543a:	d11b      	bne.n	8005474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0208 	mvn.w	r2, #8
 8005444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2204      	movs	r2, #4
 800544a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fb f836 	bl	80004cc <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa80 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fa87 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b10      	cmp	r3, #16
 8005480:	d122      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b10      	cmp	r3, #16
 800548e:	d11b      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0210 	mvn.w	r2, #16
 8005498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2208      	movs	r2, #8
 800549e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fb f80c 	bl	80004cc <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa56 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fa5d 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d10e      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d107      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0201 	mvn.w	r2, #1
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa30 	bl	8005954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b80      	cmp	r3, #128	; 0x80
 8005500:	d10e      	bne.n	8005520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550c:	2b80      	cmp	r3, #128	; 0x80
 800550e:	d107      	bne.n	8005520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fde4 	bl	80060e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d10e      	bne.n	800554c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d107      	bne.n	800554c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa22 	bl	8005990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d10e      	bne.n	8005578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b20      	cmp	r3, #32
 8005566:	d107      	bne.n	8005578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0220 	mvn.w	r2, #32
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fdae 	bl	80060d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_TIM_IC_ConfigChannel+0x1e>
 800559a:	2302      	movs	r3, #2
 800559c:	e088      	b.n	80056b0 <HAL_TIM_IC_ConfigChannel+0x130>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d11b      	bne.n	80055e4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6819      	ldr	r1, [r3, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f000 fb24 	bl	8005c08 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 020c 	bic.w	r2, r2, #12
 80055ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	619a      	str	r2, [r3, #24]
 80055e2:	e060      	b.n	80056a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d11c      	bne.n	8005624 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6819      	ldr	r1, [r3, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f000 fba8 	bl	8005d4e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800560c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6999      	ldr	r1, [r3, #24]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	021a      	lsls	r2, r3, #8
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	619a      	str	r2, [r3, #24]
 8005622:	e040      	b.n	80056a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b08      	cmp	r3, #8
 8005628:	d11b      	bne.n	8005662 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f000 fbf5 	bl	8005e28 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 020c 	bic.w	r2, r2, #12
 800564c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69d9      	ldr	r1, [r3, #28]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	61da      	str	r2, [r3, #28]
 8005660:	e021      	b.n	80056a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d11c      	bne.n	80056a2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f000 fc12 	bl	8005ea0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800568a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69d9      	ldr	r1, [r3, #28]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	021a      	lsls	r2, r3, #8
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
 80056a0:	e001      	b.n	80056a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_TIM_ConfigClockSource+0x1c>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e0b4      	b.n	800583e <HAL_TIM_ConfigClockSource+0x186>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570c:	d03e      	beq.n	800578c <HAL_TIM_ConfigClockSource+0xd4>
 800570e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005712:	f200 8087 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	f000 8086 	beq.w	800582a <HAL_TIM_ConfigClockSource+0x172>
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005722:	d87f      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b70      	cmp	r3, #112	; 0x70
 8005726:	d01a      	beq.n	800575e <HAL_TIM_ConfigClockSource+0xa6>
 8005728:	2b70      	cmp	r3, #112	; 0x70
 800572a:	d87b      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b60      	cmp	r3, #96	; 0x60
 800572e:	d050      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x11a>
 8005730:	2b60      	cmp	r3, #96	; 0x60
 8005732:	d877      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b50      	cmp	r3, #80	; 0x50
 8005736:	d03c      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0xfa>
 8005738:	2b50      	cmp	r3, #80	; 0x50
 800573a:	d873      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d058      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x13a>
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d86f      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b30      	cmp	r3, #48	; 0x30
 8005746:	d064      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15a>
 8005748:	2b30      	cmp	r3, #48	; 0x30
 800574a:	d86b      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d060      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15a>
 8005750:	2b20      	cmp	r3, #32
 8005752:	d867      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d05c      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15a>
 8005758:	2b10      	cmp	r3, #16
 800575a:	d05a      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15a>
 800575c:	e062      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6899      	ldr	r1, [r3, #8]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f000 fbef 	bl	8005f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	609a      	str	r2, [r3, #8]
      break;
 800578a:	e04f      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6899      	ldr	r1, [r3, #8]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f000 fbd8 	bl	8005f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ae:	609a      	str	r2, [r3, #8]
      break;
 80057b0:	e03c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6859      	ldr	r1, [r3, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	461a      	mov	r2, r3
 80057c0:	f000 fa96 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2150      	movs	r1, #80	; 0x50
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fba5 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80057d0:	e02c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 faf2 	bl	8005dc8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2160      	movs	r1, #96	; 0x60
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fb95 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80057f0:	e01c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	461a      	mov	r2, r3
 8005800:	f000 fa76 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2140      	movs	r1, #64	; 0x40
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fb85 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 8005810:	e00c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4619      	mov	r1, r3
 800581c:	4610      	mov	r0, r2
 800581e:	f000 fb7c 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 8005822:	e003      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      break;
 8005828:	e000      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800582a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_TIM_SlaveConfigSynchro+0x18>
 800585a:	2302      	movs	r3, #2
 800585c:	e031      	b.n	80058c2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f937 	bl	8005ae4 <TIM_SlaveTimer_SetConfig>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e018      	b.n	80058c2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058ae:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b0c      	cmp	r3, #12
 80058de:	d831      	bhi.n	8005944 <HAL_TIM_ReadCapturedValue+0x78>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	0800591d 	.word	0x0800591d
 80058ec:	08005945 	.word	0x08005945
 80058f0:	08005945 	.word	0x08005945
 80058f4:	08005945 	.word	0x08005945
 80058f8:	08005927 	.word	0x08005927
 80058fc:	08005945 	.word	0x08005945
 8005900:	08005945 	.word	0x08005945
 8005904:	08005945 	.word	0x08005945
 8005908:	08005931 	.word	0x08005931
 800590c:	08005945 	.word	0x08005945
 8005910:	08005945 	.word	0x08005945
 8005914:	08005945 	.word	0x08005945
 8005918:	0800593b 	.word	0x0800593b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005922:	60fb      	str	r3, [r7, #12]

      break;
 8005924:	e00f      	b.n	8005946 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	60fb      	str	r3, [r7, #12]

      break;
 800592e:	e00a      	b.n	8005946 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	60fb      	str	r3, [r7, #12]

      break;
 8005938:	e005      	b.n	8005946 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	60fb      	str	r3, [r7, #12]

      break;
 8005942:	e000      	b.n	8005946 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005944:	bf00      	nop
  }

  return tmpreg;
 8005946:	68fb      	ldr	r3, [r7, #12]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a40      	ldr	r2, [pc, #256]	; (8005ab8 <TIM_Base_SetConfig+0x114>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c2:	d00f      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a3d      	ldr	r2, [pc, #244]	; (8005abc <TIM_Base_SetConfig+0x118>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00b      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3c      	ldr	r2, [pc, #240]	; (8005ac0 <TIM_Base_SetConfig+0x11c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d007      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3b      	ldr	r2, [pc, #236]	; (8005ac4 <TIM_Base_SetConfig+0x120>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_Base_SetConfig+0x40>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a3a      	ldr	r2, [pc, #232]	; (8005ac8 <TIM_Base_SetConfig+0x124>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d108      	bne.n	80059f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2f      	ldr	r2, [pc, #188]	; (8005ab8 <TIM_Base_SetConfig+0x114>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d02b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d027      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2c      	ldr	r2, [pc, #176]	; (8005abc <TIM_Base_SetConfig+0x118>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d023      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2b      	ldr	r2, [pc, #172]	; (8005ac0 <TIM_Base_SetConfig+0x11c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01f      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <TIM_Base_SetConfig+0x120>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a29      	ldr	r2, [pc, #164]	; (8005ac8 <TIM_Base_SetConfig+0x124>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d017      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a28      	ldr	r2, [pc, #160]	; (8005acc <TIM_Base_SetConfig+0x128>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a27      	ldr	r2, [pc, #156]	; (8005ad0 <TIM_Base_SetConfig+0x12c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a26      	ldr	r2, [pc, #152]	; (8005ad4 <TIM_Base_SetConfig+0x130>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a25      	ldr	r2, [pc, #148]	; (8005ad8 <TIM_Base_SetConfig+0x134>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a24      	ldr	r2, [pc, #144]	; (8005adc <TIM_Base_SetConfig+0x138>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a23      	ldr	r2, [pc, #140]	; (8005ae0 <TIM_Base_SetConfig+0x13c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a0a      	ldr	r2, [pc, #40]	; (8005ab8 <TIM_Base_SetConfig+0x114>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_Base_SetConfig+0xf8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a0c      	ldr	r2, [pc, #48]	; (8005ac8 <TIM_Base_SetConfig+0x124>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d103      	bne.n	8005aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40014800 	.word	0x40014800
 8005ad8:	40001800 	.word	0x40001800
 8005adc:	40001c00 	.word	0x40001c00
 8005ae0:	40002000 	.word	0x40002000

08005ae4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b00:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f023 0307 	bic.w	r3, r3, #7
 8005b12:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b70      	cmp	r3, #112	; 0x70
 8005b2c:	d01a      	beq.n	8005b64 <TIM_SlaveTimer_SetConfig+0x80>
 8005b2e:	2b70      	cmp	r3, #112	; 0x70
 8005b30:	d860      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b32:	2b60      	cmp	r3, #96	; 0x60
 8005b34:	d054      	beq.n	8005be0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005b36:	2b60      	cmp	r3, #96	; 0x60
 8005b38:	d85c      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b3a:	2b50      	cmp	r3, #80	; 0x50
 8005b3c:	d046      	beq.n	8005bcc <TIM_SlaveTimer_SetConfig+0xe8>
 8005b3e:	2b50      	cmp	r3, #80	; 0x50
 8005b40:	d858      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b42:	2b40      	cmp	r3, #64	; 0x40
 8005b44:	d019      	beq.n	8005b7a <TIM_SlaveTimer_SetConfig+0x96>
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d854      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b4a:	2b30      	cmp	r3, #48	; 0x30
 8005b4c:	d055      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x116>
 8005b4e:	2b30      	cmp	r3, #48	; 0x30
 8005b50:	d850      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d051      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x116>
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d84c      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d04d      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x116>
 8005b5e:	2b10      	cmp	r3, #16
 8005b60:	d04b      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x116>
 8005b62:	e047      	b.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68d9      	ldr	r1, [r3, #12]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f000 f9ec 	bl	8005f50 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005b78:	e040      	b.n	8005bfc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	d101      	bne.n	8005b86 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e03b      	b.n	8005bfe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a1a      	ldr	r2, [r3, #32]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0201 	bic.w	r2, r2, #1
 8005b9c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bac:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	621a      	str	r2, [r3, #32]
      break;
 8005bca:	e017      	b.n	8005bfc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6899      	ldr	r1, [r3, #8]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f000 f889 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005bde:	e00d      	b.n	8005bfc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6899      	ldr	r1, [r3, #8]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	461a      	mov	r2, r3
 8005bee:	f000 f8eb 	bl	8005dc8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005bf2:	e003      	b.n	8005bfc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf8:	e000      	b.n	8005bfc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005bfa:	bf00      	nop
  }

  return status;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f023 0201 	bic.w	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <TIM_TI1_SetConfig+0xcc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01b      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3c:	d017      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a25      	ldr	r2, [pc, #148]	; (8005cd8 <TIM_TI1_SetConfig+0xd0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a24      	ldr	r2, [pc, #144]	; (8005cdc <TIM_TI1_SetConfig+0xd4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00f      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a23      	ldr	r2, [pc, #140]	; (8005ce0 <TIM_TI1_SetConfig+0xd8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a22      	ldr	r2, [pc, #136]	; (8005ce4 <TIM_TI1_SetConfig+0xdc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4a21      	ldr	r2, [pc, #132]	; (8005ce8 <TIM_TI1_SetConfig+0xe0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a20      	ldr	r2, [pc, #128]	; (8005cec <TIM_TI1_SetConfig+0xe4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d101      	bne.n	8005c72 <TIM_TI1_SetConfig+0x6a>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <TIM_TI1_SetConfig+0x6c>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e003      	b.n	8005c92 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f043 0301 	orr.w	r3, r3, #1
 8005c90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f023 030a 	bic.w	r3, r3, #10
 8005cac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f003 030a 	and.w	r3, r3, #10
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40010000 	.word	0x40010000
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40010400 	.word	0x40010400
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40001800 	.word	0x40001800

08005cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 030a 	bic.w	r3, r3, #10
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b087      	sub	sp, #28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
 8005d5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f023 0210 	bic.w	r2, r3, #16
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	031b      	lsls	r3, r3, #12
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005da0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	f023 0210 	bic.w	r2, r3, #16
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005df2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	031b      	lsls	r3, r3, #12
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	621a      	str	r2, [r3, #32]
}
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f023 0303 	bic.w	r3, r3, #3
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	621a      	str	r2, [r3, #32]
}
 8005e94:	bf00      	nop
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ecc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ede:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	031b      	lsls	r3, r3, #12
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ef2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	031b      	lsls	r3, r3, #12
 8005ef8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f043 0307 	orr.w	r3, r3, #7
 8005f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	609a      	str	r2, [r3, #8]
}
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	021a      	lsls	r2, r3, #8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	609a      	str	r2, [r3, #8]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1a      	ldr	r2, [r3, #32]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1a      	ldr	r2, [r3, #32]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 031f 	and.w	r3, r3, #31
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e05a      	b.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d022      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006040:	d01d      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d018      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00e      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d009      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a17      	ldr	r2, [pc, #92]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d004      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a15      	ldr	r2, [pc, #84]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d10c      	bne.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006084:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	4313      	orrs	r3, r2
 800608e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40010000 	.word	0x40010000
 80060bc:	40000400 	.word	0x40000400
 80060c0:	40000800 	.word	0x40000800
 80060c4:	40000c00 	.word	0x40000c00
 80060c8:	40010400 	.word	0x40010400
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40001800 	.word	0x40001800

080060d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060fc:	b084      	sub	sp, #16
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	f107 001c 	add.w	r0, r7, #28
 800610a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	2b01      	cmp	r3, #1
 8006112:	d122      	bne.n	800615a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800613c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d105      	bne.n	800614e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f9c0 	bl	80064d4 <USB_CoreReset>
 8006154:	4603      	mov	r3, r0
 8006156:	73fb      	strb	r3, [r7, #15]
 8006158:	e01a      	b.n	8006190 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f9b4 	bl	80064d4 <USB_CoreReset>
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	639a      	str	r2, [r3, #56]	; 0x38
 8006182:	e005      	b.n	8006190 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	2b01      	cmp	r3, #1
 8006194:	d10b      	bne.n	80061ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f043 0206 	orr.w	r2, r3, #6
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061ba:	b004      	add	sp, #16
 80061bc:	4770      	bx	lr

080061be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f043 0201 	orr.w	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f023 0201 	bic.w	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d115      	bne.n	8006250 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006230:	2001      	movs	r0, #1
 8006232:	f7fa ff77 	bl	8001124 <HAL_Delay>
      ms++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f93a 	bl	80064b6 <USB_GetMode>
 8006242:	4603      	mov	r3, r0
 8006244:	2b01      	cmp	r3, #1
 8006246:	d01e      	beq.n	8006286 <USB_SetCurrentMode+0x84>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b31      	cmp	r3, #49	; 0x31
 800624c:	d9f0      	bls.n	8006230 <USB_SetCurrentMode+0x2e>
 800624e:	e01a      	b.n	8006286 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d115      	bne.n	8006282 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006262:	2001      	movs	r0, #1
 8006264:	f7fa ff5e 	bl	8001124 <HAL_Delay>
      ms++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3301      	adds	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f921 	bl	80064b6 <USB_GetMode>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <USB_SetCurrentMode+0x84>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b31      	cmp	r3, #49	; 0x31
 800627e:	d9f0      	bls.n	8006262 <USB_SetCurrentMode+0x60>
 8006280:	e001      	b.n	8006286 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e005      	b.n	8006292 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b32      	cmp	r3, #50	; 0x32
 800628a:	d101      	bne.n	8006290 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a13      	ldr	r2, [pc, #76]	; (8006300 <USB_FlushTxFifo+0x64>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d901      	bls.n	80062bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e01b      	b.n	80062f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	daf2      	bge.n	80062aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	019b      	lsls	r3, r3, #6
 80062cc:	f043 0220 	orr.w	r2, r3, #32
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4a08      	ldr	r2, [pc, #32]	; (8006300 <USB_FlushTxFifo+0x64>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e006      	b.n	80062f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d0f0      	beq.n	80062d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	00030d40 	.word	0x00030d40

08006304 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3301      	adds	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4a11      	ldr	r2, [pc, #68]	; (8006360 <USB_FlushRxFifo+0x5c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d901      	bls.n	8006322 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e018      	b.n	8006354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	daf2      	bge.n	8006310 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2210      	movs	r2, #16
 8006332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3301      	adds	r3, #1
 8006338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4a08      	ldr	r2, [pc, #32]	; (8006360 <USB_FlushRxFifo+0x5c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d901      	bls.n	8006346 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e006      	b.n	8006354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b10      	cmp	r3, #16
 8006350:	d0f0      	beq.n	8006334 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	00030d40 	.word	0x00030d40

08006364 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006364:	b480      	push	{r7}
 8006366:	b089      	sub	sp, #36	; 0x24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	4611      	mov	r1, r2
 8006370:	461a      	mov	r2, r3
 8006372:	460b      	mov	r3, r1
 8006374:	71fb      	strb	r3, [r7, #7]
 8006376:	4613      	mov	r3, r2
 8006378:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006382:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d123      	bne.n	80063d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800638a:	88bb      	ldrh	r3, [r7, #4]
 800638c:	3303      	adds	r3, #3
 800638e:	089b      	lsrs	r3, r3, #2
 8006390:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006392:	2300      	movs	r3, #0
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	e018      	b.n	80063ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	031a      	lsls	r2, r3, #12
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a4:	461a      	mov	r2, r3
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3301      	adds	r3, #1
 80063b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	3301      	adds	r3, #1
 80063b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3301      	adds	r3, #1
 80063bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	3301      	adds	r3, #1
 80063c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	3301      	adds	r3, #1
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d3e2      	bcc.n	8006398 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3724      	adds	r7, #36	; 0x24
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b08b      	sub	sp, #44	; 0x2c
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	089b      	lsrs	r3, r3, #2
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006406:	2300      	movs	r3, #0
 8006408:	623b      	str	r3, [r7, #32]
 800640a:	e014      	b.n	8006436 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	601a      	str	r2, [r3, #0]
    pDest++;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	3301      	adds	r3, #1
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	3301      	adds	r3, #1
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	3301      	adds	r3, #1
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	3301      	adds	r3, #1
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	3301      	adds	r3, #1
 8006434:	623b      	str	r3, [r7, #32]
 8006436:	6a3a      	ldr	r2, [r7, #32]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	429a      	cmp	r2, r3
 800643c:	d3e6      	bcc.n	800640c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800643e:	8bfb      	ldrh	r3, [r7, #30]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01e      	beq.n	8006482 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800644e:	461a      	mov	r2, r3
 8006450:	f107 0310 	add.w	r3, r7, #16
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
 8006464:	b2da      	uxtb	r2, r3
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	701a      	strb	r2, [r3, #0]
      i++;
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	3301      	adds	r3, #1
 800646e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	3301      	adds	r3, #1
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006476:	8bfb      	ldrh	r3, [r7, #30]
 8006478:	3b01      	subs	r3, #1
 800647a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800647c:	8bfb      	ldrh	r3, [r7, #30]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1ea      	bne.n	8006458 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006484:	4618      	mov	r0, r3
 8006486:	372c      	adds	r7, #44	; 0x2c
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064a8:	68fb      	ldr	r3, [r7, #12]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0301 	and.w	r3, r3, #1
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a13      	ldr	r2, [pc, #76]	; (8006538 <USB_CoreReset+0x64>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e01b      	b.n	800652a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	daf2      	bge.n	80064e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f043 0201 	orr.w	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3301      	adds	r3, #1
 800650e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a09      	ldr	r2, [pc, #36]	; (8006538 <USB_CoreReset+0x64>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d901      	bls.n	800651c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e006      	b.n	800652a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b01      	cmp	r3, #1
 8006526:	d0f0      	beq.n	800650a <USB_CoreReset+0x36>

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	00030d40 	.word	0x00030d40

0800653c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800653c:	b084      	sub	sp, #16
 800653e:	b580      	push	{r7, lr}
 8006540:	b086      	sub	sp, #24
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800654a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800655c:	461a      	mov	r2, r3
 800655e:	2300      	movs	r3, #0
 8006560:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658e:	2b00      	cmp	r3, #0
 8006590:	d018      	beq.n	80065c4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	2b01      	cmp	r3, #1
 8006596:	d10a      	bne.n	80065ae <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065a6:	f043 0304 	orr.w	r3, r3, #4
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e014      	b.n	80065d8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065bc:	f023 0304 	bic.w	r3, r3, #4
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	e009      	b.n	80065d8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065d2:	f023 0304 	bic.w	r3, r3, #4
 80065d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065d8:	2110      	movs	r1, #16
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff fe5e 	bl	800629c <USB_FlushTxFifo>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fe8a 	bl	8006304 <USB_FlushRxFifo>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80065fa:	2300      	movs	r3, #0
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	e015      	b.n	800662c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660c:	461a      	mov	r2, r3
 800660e:	f04f 33ff 	mov.w	r3, #4294967295
 8006612:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006620:	461a      	mov	r2, r3
 8006622:	2300      	movs	r3, #0
 8006624:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	3301      	adds	r3, #1
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	429a      	cmp	r2, r3
 8006632:	d3e5      	bcc.n	8006600 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f04f 32ff 	mov.w	r2, #4294967295
 8006640:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006654:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a13      	ldr	r2, [pc, #76]	; (80066a8 <USB_HostInit+0x16c>)
 800665a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a13      	ldr	r2, [pc, #76]	; (80066ac <USB_HostInit+0x170>)
 8006660:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006664:	e009      	b.n	800667a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2280      	movs	r2, #128	; 0x80
 800666a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a10      	ldr	r2, [pc, #64]	; (80066b0 <USB_HostInit+0x174>)
 8006670:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a0f      	ldr	r2, [pc, #60]	; (80066b4 <USB_HostInit+0x178>)
 8006676:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f043 0210 	orr.w	r2, r3, #16
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <USB_HostInit+0x17c>)
 8006692:	4313      	orrs	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066a4:	b004      	add	sp, #16
 80066a6:	4770      	bx	lr
 80066a8:	01000200 	.word	0x01000200
 80066ac:	00e00300 	.word	0x00e00300
 80066b0:	00600080 	.word	0x00600080
 80066b4:	004000e0 	.word	0x004000e0
 80066b8:	a3200008 	.word	0xa3200008

080066bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066da:	f023 0303 	bic.w	r3, r3, #3
 80066de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80066f4:	4313      	orrs	r3, r2
 80066f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d107      	bne.n	800670e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006704:	461a      	mov	r2, r3
 8006706:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800670a:	6053      	str	r3, [r2, #4]
 800670c:	e009      	b.n	8006722 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d106      	bne.n	8006722 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671a:	461a      	mov	r2, r3
 800671c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006720:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006750:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800675a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006760:	2064      	movs	r0, #100	; 0x64
 8006762:	f7fa fcdf 	bl	8001124 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800676e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006772:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006774:	200a      	movs	r0, #10
 8006776:	f7fa fcd5 	bl	8001124 <HAL_Delay>

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <USB_DriveVbus+0x44>
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d106      	bne.n	80067c8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067c6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	d109      	bne.n	80067e8 <USB_DriveVbus+0x64>
 80067d4:	78fb      	ldrb	r3, [r7, #3]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067e6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	0c5b      	lsrs	r3, r3, #17
 8006814:	f003 0303 	and.w	r3, r3, #3
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	b29b      	uxth	r3, r3
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	4608      	mov	r0, r1
 8006852:	4611      	mov	r1, r2
 8006854:	461a      	mov	r2, r3
 8006856:	4603      	mov	r3, r0
 8006858:	70fb      	strb	r3, [r7, #3]
 800685a:	460b      	mov	r3, r1
 800685c:	70bb      	strb	r3, [r7, #2]
 800685e:	4613      	mov	r3, r2
 8006860:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4413      	add	r3, r2
 8006872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006876:	461a      	mov	r2, r3
 8006878:	f04f 33ff 	mov.w	r3, #4294967295
 800687c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800687e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006882:	2b03      	cmp	r3, #3
 8006884:	d87e      	bhi.n	8006984 <USB_HC_Init+0x13c>
 8006886:	a201      	add	r2, pc, #4	; (adr r2, 800688c <USB_HC_Init+0x44>)
 8006888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688c:	0800689d 	.word	0x0800689d
 8006890:	08006947 	.word	0x08006947
 8006894:	0800689d 	.word	0x0800689d
 8006898:	08006909 	.word	0x08006909
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a8:	461a      	mov	r2, r3
 80068aa:	f240 439d 	movw	r3, #1181	; 0x49d
 80068ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80068b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	da10      	bge.n	80068da <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	78fa      	ldrb	r2, [r7, #3]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80068d8:	e057      	b.n	800698a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d051      	beq.n	800698a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	78fa      	ldrb	r2, [r7, #3]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006900:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006904:	60d3      	str	r3, [r2, #12]
      break;
 8006906:	e040      	b.n	800698a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006914:	461a      	mov	r2, r3
 8006916:	f240 639d 	movw	r3, #1693	; 0x69d
 800691a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800691c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006920:	2b00      	cmp	r3, #0
 8006922:	da34      	bge.n	800698e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	4413      	add	r3, r2
 800692c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	78fa      	ldrb	r2, [r7, #3]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	440a      	add	r2, r1
 800693a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800693e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006942:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006944:	e023      	b.n	800698e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006952:	461a      	mov	r2, r3
 8006954:	f240 2325 	movw	r3, #549	; 0x225
 8006958:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800695a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800695e:	2b00      	cmp	r3, #0
 8006960:	da17      	bge.n	8006992 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	440a      	add	r2, r1
 8006978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800697c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006980:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006982:	e006      	b.n	8006992 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	77fb      	strb	r3, [r7, #31]
      break;
 8006988:	e004      	b.n	8006994 <USB_HC_Init+0x14c>
      break;
 800698a:	bf00      	nop
 800698c:	e002      	b.n	8006994 <USB_HC_Init+0x14c>
      break;
 800698e:	bf00      	nop
 8006990:	e000      	b.n	8006994 <USB_HC_Init+0x14c>
      break;
 8006992:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	4413      	add	r3, r2
 800699c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	78fa      	ldrb	r2, [r7, #3]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ae:	f043 0302 	orr.w	r3, r3, #2
 80069b2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	2101      	movs	r1, #1
 80069c4:	fa01 f303 	lsl.w	r3, r1, r3
 80069c8:	6939      	ldr	r1, [r7, #16]
 80069ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069ce:	4313      	orrs	r3, r2
 80069d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80069de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	da03      	bge.n	80069ee <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80069e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	e001      	b.n	80069f2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff feff 	bl	80067f6 <USB_GetHostSpeed>
 80069f8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80069fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d106      	bne.n	8006a10 <USB_HC_Init+0x1c8>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d003      	beq.n	8006a10 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e001      	b.n	8006a14 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a14:	787b      	ldrb	r3, [r7, #1]
 8006a16:	059b      	lsls	r3, r3, #22
 8006a18:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a1c:	78bb      	ldrb	r3, [r7, #2]
 8006a1e:	02db      	lsls	r3, r3, #11
 8006a20:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a24:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a2a:	049b      	lsls	r3, r3, #18
 8006a2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	0159      	lsls	r1, r3, #5
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	440b      	add	r3, r1
 8006a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a50:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006a52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d003      	beq.n	8006a62 <USB_HC_Init+0x21a>
 8006a5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d10f      	bne.n	8006a82 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a80:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a82:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3720      	adds	r7, #32
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08c      	sub	sp, #48	; 0x30
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aa8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d02d      	beq.n	8006b12 <USB_HC_StartXfer+0x86>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	791b      	ldrb	r3, [r3, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d129      	bne.n	8006b12 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d117      	bne.n	8006af4 <USB_HC_StartXfer+0x68>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	79db      	ldrb	r3, [r3, #7]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <USB_HC_StartXfer+0x48>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	79db      	ldrb	r3, [r3, #7]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d10f      	bne.n	8006af4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	6a3a      	ldr	r2, [r7, #32]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <USB_HC_StartXfer+0x86>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	795b      	ldrb	r3, [r3, #5]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d107      	bne.n	8006b12 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	785b      	ldrb	r3, [r3, #1]
 8006b06:	4619      	mov	r1, r3
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 fa0f 	bl	8006f2c <USB_DoPing>
      return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e0f8      	b.n	8006d04 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d018      	beq.n	8006b4c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	8912      	ldrh	r2, [r2, #8]
 8006b22:	4413      	add	r3, r2
 8006b24:	3b01      	subs	r3, #1
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	8912      	ldrh	r2, [r2, #8]
 8006b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b2e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b32:	8b7b      	ldrh	r3, [r7, #26]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d90b      	bls.n	8006b50 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006b38:	8b7b      	ldrh	r3, [r7, #26]
 8006b3a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	8912      	ldrh	r2, [r2, #8]
 8006b42:	fb03 f202 	mul.w	r2, r3, r2
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	611a      	str	r2, [r3, #16]
 8006b4a:	e001      	b.n	8006b50 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	78db      	ldrb	r3, [r3, #3]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	8912      	ldrh	r2, [r2, #8]
 8006b5e:	fb03 f202 	mul.w	r2, r3, r2
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	611a      	str	r2, [r3, #16]
 8006b66:	e003      	b.n	8006b70 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	695a      	ldr	r2, [r3, #20]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b7a:	04d9      	lsls	r1, r3, #19
 8006b7c:	4b63      	ldr	r3, [pc, #396]	; (8006d0c <USB_HC_StartXfer+0x280>)
 8006b7e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b80:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	7a9b      	ldrb	r3, [r3, #10]
 8006b86:	075b      	lsls	r3, r3, #29
 8006b88:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b8c:	69f9      	ldr	r1, [r7, #28]
 8006b8e:	0148      	lsls	r0, r1, #5
 8006b90:	6a39      	ldr	r1, [r7, #32]
 8006b92:	4401      	add	r1, r0
 8006b94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b98:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b9a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	68d9      	ldr	r1, [r3, #12]
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb2:	460a      	mov	r2, r1
 8006bb4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2301      	moveq	r3, #1
 8006bc8:	2300      	movne	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	6a3a      	ldr	r2, [r7, #32]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006be8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	7e7b      	ldrb	r3, [r7, #25]
 8006bfe:	075b      	lsls	r3, r3, #29
 8006c00:	69f9      	ldr	r1, [r7, #28]
 8006c02:	0148      	lsls	r0, r1, #5
 8006c04:	6a39      	ldr	r1, [r7, #32]
 8006c06:	4401      	add	r1, r0
 8006c08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c26:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	78db      	ldrb	r3, [r3, #3]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	e003      	b.n	8006c42 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c40:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c48:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c56:	461a      	mov	r2, r3
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	e04e      	b.n	8006d04 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	78db      	ldrb	r3, [r3, #3]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d149      	bne.n	8006d02 <USB_HC_StartXfer+0x276>
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d045      	beq.n	8006d02 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	79db      	ldrb	r3, [r3, #7]
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d830      	bhi.n	8006ce0 <USB_HC_StartXfer+0x254>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <USB_HC_StartXfer+0x1f8>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006c95 	.word	0x08006c95
 8006c88:	08006cb9 	.word	0x08006cb9
 8006c8c:	08006c95 	.word	0x08006c95
 8006c90:	08006cb9 	.word	0x08006cb9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	3303      	adds	r3, #3
 8006c9a:	089b      	lsrs	r3, r3, #2
 8006c9c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c9e:	8afa      	ldrh	r2, [r7, #22]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d91c      	bls.n	8006ce4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f043 0220 	orr.w	r2, r3, #32
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cb6:	e015      	b.n	8006ce4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	3303      	adds	r3, #3
 8006cbe:	089b      	lsrs	r3, r3, #2
 8006cc0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cc2:	8afa      	ldrh	r2, [r7, #22]
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d90a      	bls.n	8006ce8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cde:	e003      	b.n	8006ce8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006ce0:	bf00      	nop
 8006ce2:	e002      	b.n	8006cea <USB_HC_StartXfer+0x25e>
        break;
 8006ce4:	bf00      	nop
 8006ce6:	e000      	b.n	8006cea <USB_HC_StartXfer+0x25e>
        break;
 8006ce8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	68d9      	ldr	r1, [r3, #12]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	785a      	ldrb	r2, [r3, #1]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	9000      	str	r0, [sp, #0]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fb31 	bl	8006364 <USB_WritePacket>
  }

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3728      	adds	r7, #40	; 0x28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	1ff80000 	.word	0x1ff80000

08006d10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	b29b      	uxth	r3, r3
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b089      	sub	sp, #36	; 0x24
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	0c9b      	lsrs	r3, r3, #18
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	0fdb      	lsrs	r3, r3, #31
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d104      	bne.n	8006d8c <USB_HC_Halt+0x5a>
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e0c8      	b.n	8006f1e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <USB_HC_Halt+0x66>
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d163      	bne.n	8006e60 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006db6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0320 	and.w	r3, r3, #32
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f040 80ab 	bne.w	8006f1c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d133      	bne.n	8006e3a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	0151      	lsls	r1, r2, #5
 8006de4:	69fa      	ldr	r2, [r7, #28]
 8006de6:	440a      	add	r2, r1
 8006de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006df0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	0151      	lsls	r1, r2, #5
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	440a      	add	r2, r1
 8006e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e10:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3301      	adds	r3, #1
 8006e16:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e1e:	d81d      	bhi.n	8006e5c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e36:	d0ec      	beq.n	8006e12 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e38:	e070      	b.n	8006f1c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e5a:	e05f      	b.n	8006f1c <USB_HC_Halt+0x1ea>
            break;
 8006e5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e5e:	e05d      	b.n	8006f1c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d133      	bne.n	8006ef8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ece:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006edc:	d81d      	bhi.n	8006f1a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ef4:	d0ec      	beq.n	8006ed0 <USB_HC_Halt+0x19e>
 8006ef6:	e011      	b.n	8006f1c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	e000      	b.n	8006f1c <USB_HC_Halt+0x1ea>
          break;
 8006f1a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3724      	adds	r7, #36	; 0x24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f40:	2301      	movs	r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	04da      	lsls	r2, r3, #19
 8006f48:	4b15      	ldr	r3, [pc, #84]	; (8006fa0 <USB_DoPing+0x74>)
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	1ff80000 	.word	0x1ff80000

08006fa4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff f911 	bl	80061e0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fbe:	2110      	movs	r1, #16
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff f96b 	bl	800629c <USB_FlushTxFifo>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff f997 	bl	8006304 <USB_FlushRxFifo>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	e01f      	b.n	8007026 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ffc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007004:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800700c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	4413      	add	r3, r2
 8007016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701a:	461a      	mov	r2, r3
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	3301      	adds	r3, #1
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	2b0f      	cmp	r3, #15
 800702a:	d9dc      	bls.n	8006fe6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800702c:	2300      	movs	r3, #0
 800702e:	61bb      	str	r3, [r7, #24]
 8007030:	e034      	b.n	800709c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	4413      	add	r3, r2
 800703a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007048:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007050:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007058:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	4413      	add	r3, r2
 8007062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007066:	461a      	mov	r2, r3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007078:	d80c      	bhi.n	8007094 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	4413      	add	r3, r2
 8007082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800708c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007090:	d0ec      	beq.n	800706c <USB_StopHost+0xc8>
 8007092:	e000      	b.n	8007096 <USB_StopHost+0xf2>
        break;
 8007094:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	3301      	adds	r3, #1
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2b0f      	cmp	r3, #15
 80070a0:	d9c7      	bls.n	8007032 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070a8:	461a      	mov	r2, r3
 80070aa:	f04f 33ff 	mov.w	r3, #4294967295
 80070ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295
 80070b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff f880 	bl	80061be <USB_EnableGlobalInt>

  return ret;
 80070be:	7ffb      	ldrb	r3, [r7, #31]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80070c8:	b590      	push	{r4, r7, lr}
 80070ca:	b089      	sub	sp, #36	; 0x24
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80070d0:	2301      	movs	r3, #1
 80070d2:	2202      	movs	r2, #2
 80070d4:	2102      	movs	r1, #2
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fc66 	bl	80079a8 <USBH_FindInterface>
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	2bff      	cmp	r3, #255	; 0xff
 80070e4:	d002      	beq.n	80070ec <USBH_CDC_InterfaceInit+0x24>
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d901      	bls.n	80070f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80070ec:	2302      	movs	r3, #2
 80070ee:	e13d      	b.n	800736c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fc3b 	bl	8007970 <USBH_SelectInterface>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80070fe:	7bbb      	ldrb	r3, [r7, #14]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007104:	2302      	movs	r3, #2
 8007106:	e131      	b.n	800736c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800710e:	2050      	movs	r0, #80	; 0x50
 8007110:	f002 fafa 	bl	8009708 <malloc>
 8007114:	4603      	mov	r3, r0
 8007116:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007128:	2302      	movs	r3, #2
 800712a:	e11f      	b.n	800736c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800712c:	2250      	movs	r2, #80	; 0x50
 800712e:	2100      	movs	r1, #0
 8007130:	68b8      	ldr	r0, [r7, #8]
 8007132:	f002 faf9 	bl	8009728 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	211a      	movs	r1, #26
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	4413      	add	r3, r2
 8007142:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	b25b      	sxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	da15      	bge.n	800717a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	211a      	movs	r1, #26
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	4413      	add	r3, r2
 800715a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800715e:	781a      	ldrb	r2, [r3, #0]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	211a      	movs	r1, #26
 800716a:	fb01 f303 	mul.w	r3, r1, r3
 800716e:	4413      	add	r3, r2
 8007170:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007174:	881a      	ldrh	r2, [r3, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 ff2c 	bl	8008fde <USBH_AllocPipe>
 8007186:	4603      	mov	r3, r0
 8007188:	461a      	mov	r2, r3
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	7819      	ldrb	r1, [r3, #0]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	7858      	ldrb	r0, [r3, #1]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	8952      	ldrh	r2, [r2, #10]
 80071a6:	9202      	str	r2, [sp, #8]
 80071a8:	2203      	movs	r2, #3
 80071aa:	9201      	str	r2, [sp, #4]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	4623      	mov	r3, r4
 80071b0:	4602      	mov	r2, r0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fee4 	bl	8008f80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2200      	movs	r2, #0
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f002 f9f3 	bl	80095ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80071c6:	2300      	movs	r3, #0
 80071c8:	2200      	movs	r2, #0
 80071ca:	210a      	movs	r1, #10
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fbeb 	bl	80079a8 <USBH_FindInterface>
 80071d2:	4603      	mov	r3, r0
 80071d4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	2bff      	cmp	r3, #255	; 0xff
 80071da:	d002      	beq.n	80071e2 <USBH_CDC_InterfaceInit+0x11a>
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d901      	bls.n	80071e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071e2:	2302      	movs	r3, #2
 80071e4:	e0c2      	b.n	800736c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	211a      	movs	r1, #26
 80071ec:	fb01 f303 	mul.w	r3, r1, r3
 80071f0:	4413      	add	r3, r2
 80071f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	b25b      	sxtb	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da16      	bge.n	800722c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	211a      	movs	r1, #26
 8007204:	fb01 f303 	mul.w	r3, r1, r3
 8007208:	4413      	add	r3, r2
 800720a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800720e:	781a      	ldrb	r2, [r3, #0]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	211a      	movs	r1, #26
 800721a:	fb01 f303 	mul.w	r3, r1, r3
 800721e:	4413      	add	r3, r2
 8007220:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007224:	881a      	ldrh	r2, [r3, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	835a      	strh	r2, [r3, #26]
 800722a:	e015      	b.n	8007258 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	211a      	movs	r1, #26
 8007232:	fb01 f303 	mul.w	r3, r1, r3
 8007236:	4413      	add	r3, r2
 8007238:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800723c:	781a      	ldrb	r2, [r3, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	211a      	movs	r1, #26
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	4413      	add	r3, r2
 800724e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007252:	881a      	ldrh	r2, [r3, #0]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	211a      	movs	r1, #26
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	4413      	add	r3, r2
 8007264:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	b25b      	sxtb	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	da16      	bge.n	800729e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	211a      	movs	r1, #26
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	211a      	movs	r1, #26
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	4413      	add	r3, r2
 8007292:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007296:	881a      	ldrh	r2, [r3, #0]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	835a      	strh	r2, [r3, #26]
 800729c:	e015      	b.n	80072ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	211a      	movs	r1, #26
 80072a4:	fb01 f303 	mul.w	r3, r1, r3
 80072a8:	4413      	add	r3, r2
 80072aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072ae:	781a      	ldrb	r2, [r3, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	211a      	movs	r1, #26
 80072ba:	fb01 f303 	mul.w	r3, r1, r3
 80072be:	4413      	add	r3, r2
 80072c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072c4:	881a      	ldrh	r2, [r3, #0]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	7b9b      	ldrb	r3, [r3, #14]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 fe84 	bl	8008fde <USBH_AllocPipe>
 80072d6:	4603      	mov	r3, r0
 80072d8:	461a      	mov	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	7bdb      	ldrb	r3, [r3, #15]
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 fe7a 	bl	8008fde <USBH_AllocPipe>
 80072ea:	4603      	mov	r3, r0
 80072ec:	461a      	mov	r2, r3
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	7b59      	ldrb	r1, [r3, #13]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	7b98      	ldrb	r0, [r3, #14]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	8b12      	ldrh	r2, [r2, #24]
 800730a:	9202      	str	r2, [sp, #8]
 800730c:	2202      	movs	r2, #2
 800730e:	9201      	str	r2, [sp, #4]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	4623      	mov	r3, r4
 8007314:	4602      	mov	r2, r0
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fe32 	bl	8008f80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	7b19      	ldrb	r1, [r3, #12]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	7bd8      	ldrb	r0, [r3, #15]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	8b52      	ldrh	r2, [r2, #26]
 8007334:	9202      	str	r2, [sp, #8]
 8007336:	2202      	movs	r2, #2
 8007338:	9201      	str	r2, [sp, #4]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	4623      	mov	r3, r4
 800733e:	4602      	mov	r2, r0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 fe1d 	bl	8008f80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	7b5b      	ldrb	r3, [r3, #13]
 8007352:	2200      	movs	r2, #0
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f002 f928 	bl	80095ac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	7b1b      	ldrb	r3, [r3, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f002 f921 	bl	80095ac <USBH_LL_SetToggle>

  return USBH_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	bd90      	pop	{r4, r7, pc}

08007374 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00e      	beq.n	80073ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 fe12 	bl	8008fbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 fe3d 	bl	8009020 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	7b1b      	ldrb	r3, [r3, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00e      	beq.n	80073d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	7b1b      	ldrb	r3, [r3, #12]
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 fdff 	bl	8008fbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	7b1b      	ldrb	r3, [r3, #12]
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 fe2a 	bl	8009020 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	7b5b      	ldrb	r3, [r3, #13]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00e      	beq.n	80073f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	7b5b      	ldrb	r3, [r3, #13]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fdec 	bl	8008fbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	7b5b      	ldrb	r3, [r3, #13]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 fe17 	bl	8009020 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	4618      	mov	r0, r3
 800740e:	f002 f983 	bl	8009718 <free>
    phost->pActiveClass->pData = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007418:	2200      	movs	r2, #0
 800741a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3340      	adds	r3, #64	; 0x40
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f8b1 	bl	80075a6 <GetLineCoding>
 8007444:	4603      	mov	r3, r0
 8007446:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d105      	bne.n	800745a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007454:	2102      	movs	r1, #2
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800745a:	7afb      	ldrb	r3, [r7, #11]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007484:	2b04      	cmp	r3, #4
 8007486:	d877      	bhi.n	8007578 <USBH_CDC_Process+0x114>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <USBH_CDC_Process+0x2c>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074a5 	.word	0x080074a5
 8007494:	080074ab 	.word	0x080074ab
 8007498:	080074db 	.word	0x080074db
 800749c:	0800754f 	.word	0x0800754f
 80074a0:	0800755d 	.word	0x0800755d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
      break;
 80074a8:	e06d      	b.n	8007586 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f897 	bl	80075e4 <SetLineCoding>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074c8:	e058      	b.n	800757c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d055      	beq.n	800757c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2204      	movs	r2, #4
 80074d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074d8:	e050      	b.n	800757c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	3340      	adds	r3, #64	; 0x40
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f860 	bl	80075a6 <GetLineCoding>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d126      	bne.n	800753e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007502:	791b      	ldrb	r3, [r3, #4]
 8007504:	429a      	cmp	r2, r3
 8007506:	d13b      	bne.n	8007580 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007512:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007514:	429a      	cmp	r2, r3
 8007516:	d133      	bne.n	8007580 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007522:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007524:	429a      	cmp	r2, r3
 8007526:	d12b      	bne.n	8007580 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007530:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007532:	429a      	cmp	r2, r3
 8007534:	d124      	bne.n	8007580 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f958 	bl	80077ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800753c:	e020      	b.n	8007580 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d01d      	beq.n	8007580 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2204      	movs	r2, #4
 8007548:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800754c:	e018      	b.n	8007580 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f867 	bl	8007622 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f8da 	bl	800770e <CDC_ProcessReception>
      break;
 800755a:	e014      	b.n	8007586 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 ffef 	bl	8008542 <USBH_ClrFeature>
 8007564:	4603      	mov	r3, r0
 8007566:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007576:	e005      	b.n	8007584 <USBH_CDC_Process+0x120>

    default:
      break;
 8007578:	bf00      	nop
 800757a:	e004      	b.n	8007586 <USBH_CDC_Process+0x122>
      break;
 800757c:	bf00      	nop
 800757e:	e002      	b.n	8007586 <USBH_CDC_Process+0x122>
      break;
 8007580:	bf00      	nop
 8007582:	e000      	b.n	8007586 <USBH_CDC_Process+0x122>
      break;
 8007584:	bf00      	nop

  }

  return status;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	22a1      	movs	r2, #161	; 0xa1
 80075b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2221      	movs	r2, #33	; 0x21
 80075ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2207      	movs	r2, #7
 80075cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2207      	movs	r2, #7
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 fa81 	bl	8008adc <USBH_CtlReq>
 80075da:	4603      	mov	r3, r0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2221      	movs	r2, #33	; 0x21
 80075f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2207      	movs	r2, #7
 800760a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2207      	movs	r2, #7
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 fa62 	bl	8008adc <USBH_CtlReq>
 8007618:	4603      	mov	r3, r0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af02      	add	r7, sp, #8
 8007628:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007634:	2300      	movs	r3, #0
 8007636:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800763e:	2b01      	cmp	r3, #1
 8007640:	d002      	beq.n	8007648 <CDC_ProcessTransmission+0x26>
 8007642:	2b02      	cmp	r3, #2
 8007644:	d023      	beq.n	800768e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007646:	e05e      	b.n	8007706 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	8b12      	ldrh	r2, [r2, #24]
 8007650:	4293      	cmp	r3, r2
 8007652:	d90b      	bls.n	800766c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	69d9      	ldr	r1, [r3, #28]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8b1a      	ldrh	r2, [r3, #24]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	7b5b      	ldrb	r3, [r3, #13]
 8007660:	2001      	movs	r0, #1
 8007662:	9000      	str	r0, [sp, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 fc48 	bl	8008efa <USBH_BulkSendData>
 800766a:	e00b      	b.n	8007684 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	7b5b      	ldrb	r3, [r3, #13]
 800767a:	2001      	movs	r0, #1
 800767c:	9000      	str	r0, [sp, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 fc3b 	bl	8008efa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800768c:	e03b      	b.n	8007706 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	7b5b      	ldrb	r3, [r3, #13]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 ff5f 	bl	8009558 <USBH_LL_GetURBState>
 800769a:	4603      	mov	r3, r0
 800769c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800769e:	7afb      	ldrb	r3, [r7, #11]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d128      	bne.n	80076f6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	8b12      	ldrh	r2, [r2, #24]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d90e      	bls.n	80076ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	8b12      	ldrh	r2, [r2, #24]
 80076b8:	1a9a      	subs	r2, r3, r2
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	8b12      	ldrh	r2, [r2, #24]
 80076c6:	441a      	add	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	61da      	str	r2, [r3, #28]
 80076cc:	e002      	b.n	80076d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076e4:	e00e      	b.n	8007704 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f868 	bl	80077c4 <USBH_CDC_TransmitCallback>
      break;
 80076f4:	e006      	b.n	8007704 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80076f6:	7afb      	ldrb	r3, [r7, #11]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d103      	bne.n	8007704 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007704:	bf00      	nop
  }
}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007720:	2300      	movs	r3, #0
 8007722:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800772a:	2b03      	cmp	r3, #3
 800772c:	d002      	beq.n	8007734 <CDC_ProcessReception+0x26>
 800772e:	2b04      	cmp	r3, #4
 8007730:	d00e      	beq.n	8007750 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007732:	e043      	b.n	80077bc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	6a19      	ldr	r1, [r3, #32]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	8b5a      	ldrh	r2, [r3, #26]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	7b1b      	ldrb	r3, [r3, #12]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 fbff 	bl	8008f44 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2204      	movs	r2, #4
 800774a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800774e:	e035      	b.n	80077bc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	7b1b      	ldrb	r3, [r3, #12]
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fefe 	bl	8009558 <USBH_LL_GetURBState>
 800775c:	4603      	mov	r3, r0
 800775e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007760:	7cfb      	ldrb	r3, [r7, #19]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d129      	bne.n	80077ba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	7b1b      	ldrb	r3, [r3, #12]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fe61 	bl	8009434 <USBH_LL_GetLastXferSize>
 8007772:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	429a      	cmp	r2, r3
 800777c:	d016      	beq.n	80077ac <CDC_ProcessReception+0x9e>
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	8b5b      	ldrh	r3, [r3, #26]
 8007782:	461a      	mov	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4293      	cmp	r3, r2
 8007788:	d910      	bls.n	80077ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	1ad2      	subs	r2, r2, r3
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	6a1a      	ldr	r2, [r3, #32]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	441a      	add	r2, r3
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2203      	movs	r2, #3
 80077a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80077aa:	e006      	b.n	80077ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f80f 	bl	80077d8 <USBH_CDC_ReceiveCallback>
      break;
 80077ba:	bf00      	nop
  }
}
 80077bc:	bf00      	nop
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	4613      	mov	r3, r2
 800780c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007814:	2302      	movs	r3, #2
 8007816:	e029      	b.n	800786c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	79fa      	ldrb	r2, [r7, #7]
 800781c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f81f 	bl	8007874 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f001 fd31 	bl	80092cc <USBH_LL_Init>

  return USBH_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	e009      	b.n	800789a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	33e0      	adds	r3, #224	; 0xe0
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	2200      	movs	r2, #0
 8007892:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3301      	adds	r3, #1
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b0f      	cmp	r3, #15
 800789e:	d9f2      	bls.n	8007886 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e009      	b.n	80078ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3301      	adds	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c0:	d3f1      	bcc.n	80078a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2240      	movs	r2, #64	; 0x40
 80078e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d016      	beq.n	800795e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10e      	bne.n	8007958 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007940:	1c59      	adds	r1, r3, #1
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	33de      	adds	r3, #222	; 0xde
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
 8007956:	e004      	b.n	8007962 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007958:	2302      	movs	r3, #2
 800795a:	73fb      	strb	r3, [r7, #15]
 800795c:	e001      	b.n	8007962 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800795e:	2302      	movs	r3, #2
 8007960:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007986:	78fa      	ldrb	r2, [r7, #3]
 8007988:	429a      	cmp	r2, r3
 800798a:	d204      	bcs.n	8007996 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007994:	e001      	b.n	800799a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007996:	2302      	movs	r3, #2
 8007998:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	4608      	mov	r0, r1
 80079b2:	4611      	mov	r1, r2
 80079b4:	461a      	mov	r2, r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	70fb      	strb	r3, [r7, #3]
 80079ba:	460b      	mov	r3, r1
 80079bc:	70bb      	strb	r3, [r7, #2]
 80079be:	4613      	mov	r3, r2
 80079c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079d2:	e025      	b.n	8007a20 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	221a      	movs	r2, #26
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
 80079dc:	3308      	adds	r3, #8
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	3302      	adds	r3, #2
 80079e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	795b      	ldrb	r3, [r3, #5]
 80079ea:	78fa      	ldrb	r2, [r7, #3]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d002      	beq.n	80079f6 <USBH_FindInterface+0x4e>
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	2bff      	cmp	r3, #255	; 0xff
 80079f4:	d111      	bne.n	8007a1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079fa:	78ba      	ldrb	r2, [r7, #2]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d002      	beq.n	8007a06 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a00:	78bb      	ldrb	r3, [r7, #2]
 8007a02:	2bff      	cmp	r3, #255	; 0xff
 8007a04:	d109      	bne.n	8007a1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a0a:	787a      	ldrb	r2, [r7, #1]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d002      	beq.n	8007a16 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a10:	787b      	ldrb	r3, [r7, #1]
 8007a12:	2bff      	cmp	r3, #255	; 0xff
 8007a14:	d101      	bne.n	8007a1a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	e006      	b.n	8007a28 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d9d6      	bls.n	80079d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007a26:	23ff      	movs	r3, #255	; 0xff
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	371c      	adds	r7, #28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fc81 	bl	8009344 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007a42:	2101      	movs	r1, #1
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 fd9a 	bl	800957e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af04      	add	r7, sp, #16
 8007a5a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d102      	bne.n	8007a76 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2203      	movs	r2, #3
 8007a74:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b0b      	cmp	r3, #11
 8007a7e:	f200 81be 	bhi.w	8007dfe <USBH_Process+0x3aa>
 8007a82:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <USBH_Process+0x34>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007ab9 	.word	0x08007ab9
 8007a8c:	08007aeb 	.word	0x08007aeb
 8007a90:	08007b53 	.word	0x08007b53
 8007a94:	08007d99 	.word	0x08007d99
 8007a98:	08007dff 	.word	0x08007dff
 8007a9c:	08007bf7 	.word	0x08007bf7
 8007aa0:	08007d3f 	.word	0x08007d3f
 8007aa4:	08007c2d 	.word	0x08007c2d
 8007aa8:	08007c4d 	.word	0x08007c4d
 8007aac:	08007c6d 	.word	0x08007c6d
 8007ab0:	08007cb1 	.word	0x08007cb1
 8007ab4:	08007d81 	.word	0x08007d81
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 819e 	beq.w	8007e02 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007acc:	20c8      	movs	r0, #200	; 0xc8
 8007ace:	f001 fd9d 	bl	800960c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 fc93 	bl	80093fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ae8:	e18b      	b.n	8007e02 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d107      	bne.n	8007b04 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b02:	e18d      	b.n	8007e20 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b0e:	d914      	bls.n	8007b3a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b16:	3301      	adds	r3, #1
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d903      	bls.n	8007b32 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	220d      	movs	r2, #13
 8007b2e:	701a      	strb	r2, [r3, #0]
      break;
 8007b30:	e176      	b.n	8007e20 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	701a      	strb	r2, [r3, #0]
      break;
 8007b38:	e172      	b.n	8007e20 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b40:	f103 020a 	add.w	r2, r3, #10
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007b4a:	200a      	movs	r0, #10
 8007b4c:	f001 fd5e 	bl	800960c <USBH_Delay>
      break;
 8007b50:	e166      	b.n	8007e20 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d005      	beq.n	8007b68 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b62:	2104      	movs	r1, #4
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b68:	2064      	movs	r0, #100	; 0x64
 8007b6a:	f001 fd4f 	bl	800960c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 fc1e 	bl	80093b0 <USBH_LL_GetSpeed>
 8007b74:	4603      	mov	r3, r0
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2205      	movs	r2, #5
 8007b82:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b84:	2100      	movs	r1, #0
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 fa29 	bl	8008fde <USBH_AllocPipe>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007b94:	2180      	movs	r1, #128	; 0x80
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 fa21 	bl	8008fde <USBH_AllocPipe>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7919      	ldrb	r1, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007bb8:	b292      	uxth	r2, r2
 8007bba:	9202      	str	r2, [sp, #8]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	9201      	str	r2, [sp, #4]
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2280      	movs	r2, #128	; 0x80
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 f9da 	bl	8008f80 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7959      	ldrb	r1, [r3, #5]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007be0:	b292      	uxth	r2, r2
 8007be2:	9202      	str	r2, [sp, #8]
 8007be4:	2200      	movs	r2, #0
 8007be6:	9201      	str	r2, [sp, #4]
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	4603      	mov	r3, r0
 8007bec:	2200      	movs	r2, #0
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 f9c6 	bl	8008f80 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bf4:	e114      	b.n	8007e20 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f918 	bl	8007e2c <USBH_HandleEnum>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f040 80fe 	bne.w	8007e06 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d103      	bne.n	8007c24 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2208      	movs	r2, #8
 8007c20:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c22:	e0f0      	b.n	8007e06 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2207      	movs	r2, #7
 8007c28:	701a      	strb	r2, [r3, #0]
      break;
 8007c2a:	e0ec      	b.n	8007e06 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80e9 	beq.w	8007e0a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c3e:	2101      	movs	r1, #1
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2208      	movs	r2, #8
 8007c48:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007c4a:	e0de      	b.n	8007e0a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fc2c 	bl	80084b4 <USBH_SetCfg>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 80d5 	bne.w	8007e0e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2209      	movs	r2, #9
 8007c68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c6a:	e0d0      	b.n	8007e0e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d016      	beq.n	8007ca8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fc3c 	bl	80084fa <USBH_SetFeature>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d103      	bne.n	8007c96 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	220a      	movs	r2, #10
 8007c92:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c94:	e0bd      	b.n	8007e12 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	f040 80b9 	bne.w	8007e12 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	220a      	movs	r2, #10
 8007ca4:	701a      	strb	r2, [r3, #0]
      break;
 8007ca6:	e0b4      	b.n	8007e12 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	220a      	movs	r2, #10
 8007cac:	701a      	strb	r2, [r3, #0]
      break;
 8007cae:	e0b0      	b.n	8007e12 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 80ad 	beq.w	8007e16 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]
 8007cc8:	e016      	b.n	8007cf8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007cca:	7bfa      	ldrb	r2, [r7, #15]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	32de      	adds	r2, #222	; 0xde
 8007cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd4:	791a      	ldrb	r2, [r3, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d108      	bne.n	8007cf2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ce0:	7bfa      	ldrb	r2, [r7, #15]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	32de      	adds	r2, #222	; 0xde
 8007ce6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007cf0:	e005      	b.n	8007cfe <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	73fb      	strb	r3, [r7, #15]
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0e5      	beq.n	8007cca <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d016      	beq.n	8007d36 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	4798      	blx	r3
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2206      	movs	r2, #6
 8007d1e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d26:	2103      	movs	r1, #3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d2c:	e073      	b.n	8007e16 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	220d      	movs	r2, #13
 8007d32:	701a      	strb	r2, [r3, #0]
      break;
 8007d34:	e06f      	b.n	8007e16 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	220d      	movs	r2, #13
 8007d3a:	701a      	strb	r2, [r3, #0]
      break;
 8007d3c:	e06b      	b.n	8007e16 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d017      	beq.n	8007d78 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
 8007d54:	4603      	mov	r3, r0
 8007d56:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	220b      	movs	r2, #11
 8007d64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d66:	e058      	b.n	8007e1a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d154      	bne.n	8007e1a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	220d      	movs	r2, #13
 8007d74:	701a      	strb	r2, [r3, #0]
      break;
 8007d76:	e050      	b.n	8007e1a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	220d      	movs	r2, #13
 8007d7c:	701a      	strb	r2, [r3, #0]
      break;
 8007d7e:	e04c      	b.n	8007e1a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d049      	beq.n	8007e1e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
      }
      break;
 8007d96:	e042      	b.n	8007e1e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff fd67 	bl	8007874 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d009      	beq.n	8007dc4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dd4:	2105      	movs	r1, #5
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d107      	bne.n	8007df6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff fe20 	bl	8007a34 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007df4:	e014      	b.n	8007e20 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 faa4 	bl	8009344 <USBH_LL_Start>
      break;
 8007dfc:	e010      	b.n	8007e20 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007dfe:	bf00      	nop
 8007e00:	e00e      	b.n	8007e20 <USBH_Process+0x3cc>
      break;
 8007e02:	bf00      	nop
 8007e04:	e00c      	b.n	8007e20 <USBH_Process+0x3cc>
      break;
 8007e06:	bf00      	nop
 8007e08:	e00a      	b.n	8007e20 <USBH_Process+0x3cc>
    break;
 8007e0a:	bf00      	nop
 8007e0c:	e008      	b.n	8007e20 <USBH_Process+0x3cc>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e006      	b.n	8007e20 <USBH_Process+0x3cc>
      break;
 8007e12:	bf00      	nop
 8007e14:	e004      	b.n	8007e20 <USBH_Process+0x3cc>
      break;
 8007e16:	bf00      	nop
 8007e18:	e002      	b.n	8007e20 <USBH_Process+0x3cc>
      break;
 8007e1a:	bf00      	nop
 8007e1c:	e000      	b.n	8007e20 <USBH_Process+0x3cc>
      break;
 8007e1e:	bf00      	nop
  }
  return USBH_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop

08007e2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af04      	add	r7, sp, #16
 8007e32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007e34:	2301      	movs	r3, #1
 8007e36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	785b      	ldrb	r3, [r3, #1]
 8007e40:	2b07      	cmp	r3, #7
 8007e42:	f200 81c1 	bhi.w	80081c8 <USBH_HandleEnum+0x39c>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBH_HandleEnum+0x20>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007f2b 	.word	0x08007f2b
 8007e54:	08007f95 	.word	0x08007f95
 8007e58:	08008023 	.word	0x08008023
 8007e5c:	0800808d 	.word	0x0800808d
 8007e60:	080080fd 	.word	0x080080fd
 8007e64:	08008143 	.word	0x08008143
 8007e68:	08008189 	.word	0x08008189
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007e6c:	2108      	movs	r1, #8
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa50 	bl	8008314 <USBH_Get_DevDesc>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d130      	bne.n	8007ee0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7919      	ldrb	r1, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ea2:	b292      	uxth	r2, r2
 8007ea4:	9202      	str	r2, [sp, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	9201      	str	r2, [sp, #4]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	4603      	mov	r3, r0
 8007eae:	2280      	movs	r2, #128	; 0x80
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 f865 	bl	8008f80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7959      	ldrb	r1, [r3, #5]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eca:	b292      	uxth	r2, r2
 8007ecc:	9202      	str	r2, [sp, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	9201      	str	r2, [sp, #4]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 f851 	bl	8008f80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ede:	e175      	b.n	80081cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	f040 8172 	bne.w	80081cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007eee:	3301      	adds	r3, #1
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d903      	bls.n	8007f0a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	220d      	movs	r2, #13
 8007f06:	701a      	strb	r2, [r3, #0]
      break;
 8007f08:	e160      	b.n	80081cc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	795b      	ldrb	r3, [r3, #5]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 f885 	bl	8009020 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	791b      	ldrb	r3, [r3, #4]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f87f 	bl	8009020 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
      break;
 8007f28:	e150      	b.n	80081cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007f2a:	2112      	movs	r1, #18
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f9f1 	bl	8008314 <USBH_Get_DevDesc>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d103      	bne.n	8007f44 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f42:	e145      	b.n	80081d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	f040 8142 	bne.w	80081d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f52:	3301      	adds	r3, #1
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d903      	bls.n	8007f6e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	220d      	movs	r2, #13
 8007f6a:	701a      	strb	r2, [r3, #0]
      break;
 8007f6c:	e130      	b.n	80081d0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	795b      	ldrb	r3, [r3, #5]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 f853 	bl	8009020 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	791b      	ldrb	r3, [r3, #4]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 f84d 	bl	8009020 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]
      break;
 8007f92:	e11d      	b.n	80081d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007f94:	2101      	movs	r1, #1
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fa68 	bl	800846c <USBH_SetAddress>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d132      	bne.n	800800c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007fa6:	2002      	movs	r0, #2
 8007fa8:	f001 fb30 	bl	800960c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2203      	movs	r2, #3
 8007fb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	7919      	ldrb	r1, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fce:	b292      	uxth	r2, r2
 8007fd0:	9202      	str	r2, [sp, #8]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	9201      	str	r2, [sp, #4]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2280      	movs	r2, #128	; 0x80
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 ffcf 	bl	8008f80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	7959      	ldrb	r1, [r3, #5]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ff6:	b292      	uxth	r2, r2
 8007ff8:	9202      	str	r2, [sp, #8]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	9201      	str	r2, [sp, #4]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	4603      	mov	r3, r0
 8008002:	2200      	movs	r2, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 ffbb 	bl	8008f80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800800a:	e0e3      	b.n	80081d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	2b03      	cmp	r3, #3
 8008010:	f040 80e0 	bne.w	80081d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	220d      	movs	r2, #13
 8008018:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	705a      	strb	r2, [r3, #1]
      break;
 8008020:	e0d8      	b.n	80081d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008022:	2109      	movs	r1, #9
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f99d 	bl	8008364 <USBH_Get_CfgDesc>
 800802a:	4603      	mov	r3, r0
 800802c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800802e:	7bbb      	ldrb	r3, [r7, #14]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d103      	bne.n	800803c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2204      	movs	r2, #4
 8008038:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800803a:	e0cd      	b.n	80081d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	2b03      	cmp	r3, #3
 8008040:	f040 80ca 	bne.w	80081d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800804a:	3301      	adds	r3, #1
 800804c:	b2da      	uxtb	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800805a:	2b03      	cmp	r3, #3
 800805c:	d903      	bls.n	8008066 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	220d      	movs	r2, #13
 8008062:	701a      	strb	r2, [r3, #0]
      break;
 8008064:	e0b8      	b.n	80081d8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	795b      	ldrb	r3, [r3, #5]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 ffd7 	bl	8009020 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	791b      	ldrb	r3, [r3, #4]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 ffd1 	bl	8009020 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
      break;
 800808a:	e0a5      	b.n	80081d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f965 	bl	8008364 <USBH_Get_CfgDesc>
 800809a:	4603      	mov	r3, r0
 800809c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d103      	bne.n	80080ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2205      	movs	r2, #5
 80080a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080aa:	e097      	b.n	80081dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	f040 8094 	bne.w	80081dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080ba:	3301      	adds	r3, #1
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d903      	bls.n	80080d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	220d      	movs	r2, #13
 80080d2:	701a      	strb	r2, [r3, #0]
      break;
 80080d4:	e082      	b.n	80081dc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	795b      	ldrb	r3, [r3, #5]
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 ff9f 	bl	8009020 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	791b      	ldrb	r3, [r3, #4]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 ff99 	bl	8009020 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	701a      	strb	r2, [r3, #0]
      break;
 80080fa:	e06f      	b.n	80081dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008102:	2b00      	cmp	r3, #0
 8008104:	d019      	beq.n	800813a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008112:	23ff      	movs	r3, #255	; 0xff
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f949 	bl	80083ac <USBH_Get_StringDesc>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d103      	bne.n	800812c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2206      	movs	r2, #6
 8008128:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800812a:	e059      	b.n	80081e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	2b03      	cmp	r3, #3
 8008130:	d156      	bne.n	80081e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2206      	movs	r2, #6
 8008136:	705a      	strb	r2, [r3, #1]
      break;
 8008138:	e052      	b.n	80081e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2206      	movs	r2, #6
 800813e:	705a      	strb	r2, [r3, #1]
      break;
 8008140:	e04e      	b.n	80081e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008148:	2b00      	cmp	r3, #0
 800814a:	d019      	beq.n	8008180 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008158:	23ff      	movs	r3, #255	; 0xff
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f926 	bl	80083ac <USBH_Get_StringDesc>
 8008160:	4603      	mov	r3, r0
 8008162:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2207      	movs	r2, #7
 800816e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008170:	e038      	b.n	80081e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b03      	cmp	r3, #3
 8008176:	d135      	bne.n	80081e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2207      	movs	r2, #7
 800817c:	705a      	strb	r2, [r3, #1]
      break;
 800817e:	e031      	b.n	80081e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2207      	movs	r2, #7
 8008184:	705a      	strb	r2, [r3, #1]
      break;
 8008186:	e02d      	b.n	80081e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800818e:	2b00      	cmp	r3, #0
 8008190:	d017      	beq.n	80081c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800819e:	23ff      	movs	r3, #255	; 0xff
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f903 	bl	80083ac <USBH_Get_StringDesc>
 80081a6:	4603      	mov	r3, r0
 80081a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80081b4:	e018      	b.n	80081e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d115      	bne.n	80081e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73fb      	strb	r3, [r7, #15]
      break;
 80081c0:	e012      	b.n	80081e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]
      break;
 80081c6:	e00f      	b.n	80081e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80081c8:	bf00      	nop
 80081ca:	e00e      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081cc:	bf00      	nop
 80081ce:	e00c      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081d0:	bf00      	nop
 80081d2:	e00a      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081d4:	bf00      	nop
 80081d6:	e008      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081d8:	bf00      	nop
 80081da:	e006      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081dc:	bf00      	nop
 80081de:	e004      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081e0:	bf00      	nop
 80081e2:	e002      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081e4:	bf00      	nop
 80081e6:	e000      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081e8:	bf00      	nop
  }
  return Status;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f804 	bl	8008236 <USBH_HandleSof>
}
 800822e:	bf00      	nop
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b0b      	cmp	r3, #11
 8008246:	d10a      	bne.n	800825e <USBH_HandleSof+0x28>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	4798      	blx	r3
  }
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008276:	bf00      	nop
}
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008292:	bf00      	nop
}
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f844 	bl	800937a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	791b      	ldrb	r3, [r3, #4]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fe91 	bl	8009020 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	795b      	ldrb	r3, [r3, #5]
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fe8b 	bl	8009020 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af02      	add	r7, sp, #8
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	b29b      	uxth	r3, r3
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008332:	2100      	movs	r1, #0
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f864 	bl	8008402 <USBH_GetDescriptor>
 800833a:	4603      	mov	r3, r0
 800833c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f203 3026 	addw	r0, r3, #806	; 0x326
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	b292      	uxth	r2, r2
 8008354:	4619      	mov	r1, r3
 8008356:	f000 f918 	bl	800858a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af02      	add	r7, sp, #8
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	331c      	adds	r3, #28
 8008374:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008376:	887b      	ldrh	r3, [r7, #2]
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008380:	2100      	movs	r1, #0
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f83d 	bl	8008402 <USBH_GetDescriptor>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d107      	bne.n	80083a2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008392:	887b      	ldrh	r3, [r7, #2]
 8008394:	461a      	mov	r2, r3
 8008396:	68b9      	ldr	r1, [r7, #8]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f987 	bl	80086ac <USBH_ParseCfgDesc>
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af02      	add	r7, sp, #8
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	461a      	mov	r2, r3
 80083b8:	460b      	mov	r3, r1
 80083ba:	72fb      	strb	r3, [r7, #11]
 80083bc:	4613      	mov	r3, r2
 80083be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80083c8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80083d0:	893b      	ldrh	r3, [r7, #8]
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	460b      	mov	r3, r1
 80083d6:	2100      	movs	r1, #0
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 f812 	bl	8008402 <USBH_GetDescriptor>
 80083de:	4603      	mov	r3, r0
 80083e0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d107      	bne.n	80083f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80083ee:	893a      	ldrh	r2, [r7, #8]
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fb24 	bl	8008a40 <USBH_ParseStringDesc>
  }

  return status;
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	607b      	str	r3, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	72fb      	strb	r3, [r7, #11]
 8008410:	4613      	mov	r3, r2
 8008412:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	789b      	ldrb	r3, [r3, #2]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d11c      	bne.n	8008456 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008422:	b2da      	uxtb	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2206      	movs	r2, #6
 800842c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	893a      	ldrh	r2, [r7, #8]
 8008432:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008434:	893b      	ldrh	r3, [r7, #8]
 8008436:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800843a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800843e:	d104      	bne.n	800844a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f240 4209 	movw	r2, #1033	; 0x409
 8008446:	829a      	strh	r2, [r3, #20]
 8008448:	e002      	b.n	8008450 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8b3a      	ldrh	r2, [r7, #24]
 8008454:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008456:	8b3b      	ldrh	r3, [r7, #24]
 8008458:	461a      	mov	r2, r3
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 fb3d 	bl	8008adc <USBH_CtlReq>
 8008462:	4603      	mov	r3, r0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	789b      	ldrb	r3, [r3, #2]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d10f      	bne.n	80084a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2205      	movs	r2, #5
 800848a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	b29a      	uxth	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fb19 	bl	8008adc <USBH_CtlReq>
 80084aa:	4603      	mov	r3, r0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	789b      	ldrb	r3, [r3, #2]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d10e      	bne.n	80084e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2209      	movs	r2, #9
 80084d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	887a      	ldrh	r2, [r7, #2]
 80084d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084e6:	2200      	movs	r2, #0
 80084e8:	2100      	movs	r1, #0
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 faf6 	bl	8008adc <USBH_CtlReq>
 80084f0:	4603      	mov	r3, r0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	789b      	ldrb	r3, [r3, #2]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d10f      	bne.n	800852e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2203      	movs	r2, #3
 8008518:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	b29a      	uxth	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800852e:	2200      	movs	r2, #0
 8008530:	2100      	movs	r1, #0
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fad2 	bl	8008adc <USBH_CtlReq>
 8008538:	4603      	mov	r3, r0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	789b      	ldrb	r3, [r3, #2]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d10f      	bne.n	8008576 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008568:	78fb      	ldrb	r3, [r7, #3]
 800856a:	b29a      	uxth	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008576:	2200      	movs	r2, #0
 8008578:	2100      	movs	r1, #0
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 faae 	bl	8008adc <USBH_CtlReq>
 8008580:	4603      	mov	r3, r0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	4613      	mov	r3, r2
 8008596:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	781a      	ldrb	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	785a      	ldrb	r2, [r3, #1]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	3302      	adds	r3, #2
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	3303      	adds	r3, #3
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	4313      	orrs	r3, r2
 80085be:	b29a      	uxth	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	791a      	ldrb	r2, [r3, #4]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	795a      	ldrb	r2, [r3, #5]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	799a      	ldrb	r2, [r3, #6]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	79da      	ldrb	r2, [r3, #7]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	79db      	ldrb	r3, [r3, #7]
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	dc11      	bgt.n	8008610 <USBH_ParseDevDesc+0x86>
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	db16      	blt.n	800861e <USBH_ParseDevDesc+0x94>
 80085f0:	3b08      	subs	r3, #8
 80085f2:	2201      	movs	r2, #1
 80085f4:	fa02 f303 	lsl.w	r3, r2, r3
 80085f8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80085fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008600:	2b00      	cmp	r3, #0
 8008602:	bf14      	ite	ne
 8008604:	2301      	movne	r3, #1
 8008606:	2300      	moveq	r3, #0
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <USBH_ParseDevDesc+0x8a>
 800860e:	e006      	b.n	800861e <USBH_ParseDevDesc+0x94>
 8008610:	2b40      	cmp	r3, #64	; 0x40
 8008612:	d104      	bne.n	800861e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	79da      	ldrb	r2, [r3, #7]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	71da      	strb	r2, [r3, #7]
      break;
 800861c:	e003      	b.n	8008626 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2240      	movs	r2, #64	; 0x40
 8008622:	71da      	strb	r2, [r3, #7]
      break;
 8008624:	bf00      	nop
  }

  if (length > 8U)
 8008626:	88fb      	ldrh	r3, [r7, #6]
 8008628:	2b08      	cmp	r3, #8
 800862a:	d939      	bls.n	80086a0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	3308      	adds	r3, #8
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	b29a      	uxth	r2, r3
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	3309      	adds	r3, #9
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	021b      	lsls	r3, r3, #8
 800863e:	b29b      	uxth	r3, r3
 8008640:	4313      	orrs	r3, r2
 8008642:	b29a      	uxth	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	330a      	adds	r3, #10
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	b29a      	uxth	r2, r3
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	330b      	adds	r3, #11
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	b29b      	uxth	r3, r3
 8008658:	021b      	lsls	r3, r3, #8
 800865a:	b29b      	uxth	r3, r3
 800865c:	4313      	orrs	r3, r2
 800865e:	b29a      	uxth	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	330c      	adds	r3, #12
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	b29a      	uxth	r2, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	330d      	adds	r3, #13
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	b29b      	uxth	r3, r3
 8008674:	021b      	lsls	r3, r3, #8
 8008676:	b29b      	uxth	r3, r3
 8008678:	4313      	orrs	r3, r2
 800867a:	b29a      	uxth	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	7b9a      	ldrb	r2, [r3, #14]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	7bda      	ldrb	r2, [r3, #15]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	7c1a      	ldrb	r2, [r3, #16]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	7c5a      	ldrb	r2, [r3, #17]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	745a      	strb	r2, [r3, #17]
  }
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08c      	sub	sp, #48	; 0x30
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	4613      	mov	r3, r2
 80086b8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80086c0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	781a      	ldrb	r2, [r3, #0]
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	785a      	ldrb	r2, [r3, #1]
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	3302      	adds	r3, #2
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	3303      	adds	r3, #3
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	021b      	lsls	r3, r3, #8
 80086fe:	b29b      	uxth	r3, r3
 8008700:	4313      	orrs	r3, r2
 8008702:	b29b      	uxth	r3, r3
 8008704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008708:	bf28      	it	cs
 800870a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800870e:	b29a      	uxth	r2, r3
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	791a      	ldrb	r2, [r3, #4]
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	795a      	ldrb	r2, [r3, #5]
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	799a      	ldrb	r2, [r3, #6]
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	79da      	ldrb	r2, [r3, #7]
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	7a1a      	ldrb	r2, [r3, #8]
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	2b09      	cmp	r3, #9
 8008742:	d002      	beq.n	800874a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	2209      	movs	r2, #9
 8008748:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800874a:	88fb      	ldrh	r3, [r7, #6]
 800874c:	2b09      	cmp	r3, #9
 800874e:	f240 809d 	bls.w	800888c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008752:	2309      	movs	r3, #9
 8008754:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800875a:	e081      	b.n	8008860 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800875c:	f107 0316 	add.w	r3, r7, #22
 8008760:	4619      	mov	r1, r3
 8008762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008764:	f000 f99f 	bl	8008aa6 <USBH_GetNextDesc>
 8008768:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876c:	785b      	ldrb	r3, [r3, #1]
 800876e:	2b04      	cmp	r3, #4
 8008770:	d176      	bne.n	8008860 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b09      	cmp	r3, #9
 8008778:	d002      	beq.n	8008780 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877c:	2209      	movs	r2, #9
 800877e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008784:	221a      	movs	r2, #26
 8008786:	fb02 f303 	mul.w	r3, r2, r3
 800878a:	3308      	adds	r3, #8
 800878c:	6a3a      	ldr	r2, [r7, #32]
 800878e:	4413      	add	r3, r2
 8008790:	3302      	adds	r3, #2
 8008792:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008796:	69f8      	ldr	r0, [r7, #28]
 8008798:	f000 f87e 	bl	8008898 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80087a6:	e043      	b.n	8008830 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80087a8:	f107 0316 	add.w	r3, r7, #22
 80087ac:	4619      	mov	r1, r3
 80087ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b0:	f000 f979 	bl	8008aa6 <USBH_GetNextDesc>
 80087b4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	785b      	ldrb	r3, [r3, #1]
 80087ba:	2b05      	cmp	r3, #5
 80087bc:	d138      	bne.n	8008830 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	795b      	ldrb	r3, [r3, #5]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d10f      	bne.n	80087e6 <USBH_ParseCfgDesc+0x13a>
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	799b      	ldrb	r3, [r3, #6]
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d10b      	bne.n	80087e6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	79db      	ldrb	r3, [r3, #7]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10f      	bne.n	80087f6 <USBH_ParseCfgDesc+0x14a>
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	2b09      	cmp	r3, #9
 80087dc:	d00b      	beq.n	80087f6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	2209      	movs	r2, #9
 80087e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087e4:	e007      	b.n	80087f6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b07      	cmp	r3, #7
 80087ec:	d004      	beq.n	80087f8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	2207      	movs	r2, #7
 80087f2:	701a      	strb	r2, [r3, #0]
 80087f4:	e000      	b.n	80087f8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087f6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80087f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008800:	3201      	adds	r2, #1
 8008802:	00d2      	lsls	r2, r2, #3
 8008804:	211a      	movs	r1, #26
 8008806:	fb01 f303 	mul.w	r3, r1, r3
 800880a:	4413      	add	r3, r2
 800880c:	3308      	adds	r3, #8
 800880e:	6a3a      	ldr	r2, [r7, #32]
 8008810:	4413      	add	r3, r2
 8008812:	3304      	adds	r3, #4
 8008814:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008818:	69b9      	ldr	r1, [r7, #24]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 f86b 	bl	80088f6 <USBH_ParseEPDesc>
 8008820:	4603      	mov	r3, r0
 8008822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008826:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800882a:	3301      	adds	r3, #1
 800882c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	791b      	ldrb	r3, [r3, #4]
 8008834:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008838:	429a      	cmp	r2, r3
 800883a:	d204      	bcs.n	8008846 <USBH_ParseCfgDesc+0x19a>
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	885a      	ldrh	r2, [r3, #2]
 8008840:	8afb      	ldrh	r3, [r7, #22]
 8008842:	429a      	cmp	r2, r3
 8008844:	d8b0      	bhi.n	80087a8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	791b      	ldrb	r3, [r3, #4]
 800884a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800884e:	429a      	cmp	r2, r3
 8008850:	d201      	bcs.n	8008856 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008852:	2303      	movs	r3, #3
 8008854:	e01c      	b.n	8008890 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800885a:	3301      	adds	r3, #1
 800885c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008864:	2b01      	cmp	r3, #1
 8008866:	d805      	bhi.n	8008874 <USBH_ParseCfgDesc+0x1c8>
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	885a      	ldrh	r2, [r3, #2]
 800886c:	8afb      	ldrh	r3, [r7, #22]
 800886e:	429a      	cmp	r2, r3
 8008870:	f63f af74 	bhi.w	800875c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	791b      	ldrb	r3, [r3, #4]
 8008878:	2b02      	cmp	r3, #2
 800887a:	bf28      	it	cs
 800887c:	2302      	movcs	r3, #2
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008884:	429a      	cmp	r2, r3
 8008886:	d201      	bcs.n	800888c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008888:	2303      	movs	r3, #3
 800888a:	e001      	b.n	8008890 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800888c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008890:	4618      	mov	r0, r3
 8008892:	3730      	adds	r7, #48	; 0x30
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781a      	ldrb	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	785a      	ldrb	r2, [r3, #1]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	789a      	ldrb	r2, [r3, #2]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	78da      	ldrb	r2, [r3, #3]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	791a      	ldrb	r2, [r3, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	795a      	ldrb	r2, [r3, #5]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	799a      	ldrb	r2, [r3, #6]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	79da      	ldrb	r2, [r3, #7]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	7a1a      	ldrb	r2, [r3, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	721a      	strb	r2, [r3, #8]
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b087      	sub	sp, #28
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	785a      	ldrb	r2, [r3, #1]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	789a      	ldrb	r2, [r3, #2]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	78da      	ldrb	r2, [r3, #3]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3304      	adds	r3, #4
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3305      	adds	r3, #5
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	b29b      	uxth	r3, r3
 800893a:	4313      	orrs	r3, r2
 800893c:	b29a      	uxth	r2, r3
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	799a      	ldrb	r2, [r3, #6]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	889b      	ldrh	r3, [r3, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008952:	2303      	movs	r3, #3
 8008954:	75fb      	strb	r3, [r7, #23]
 8008956:	e033      	b.n	80089c0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	889b      	ldrh	r3, [r3, #4]
 800895c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008960:	f023 0307 	bic.w	r3, r3, #7
 8008964:	b29a      	uxth	r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	889b      	ldrh	r3, [r3, #4]
 800896e:	b21a      	sxth	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	3304      	adds	r3, #4
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	b299      	uxth	r1, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3305      	adds	r3, #5
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	021b      	lsls	r3, r3, #8
 8008982:	b29b      	uxth	r3, r3
 8008984:	430b      	orrs	r3, r1
 8008986:	b29b      	uxth	r3, r3
 8008988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800898c:	2b00      	cmp	r3, #0
 800898e:	d110      	bne.n	80089b2 <USBH_ParseEPDesc+0xbc>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3304      	adds	r3, #4
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	b299      	uxth	r1, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	3305      	adds	r3, #5
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	430b      	orrs	r3, r1
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	b21b      	sxth	r3, r3
 80089aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089ae:	b21b      	sxth	r3, r3
 80089b0:	e001      	b.n	80089b6 <USBH_ParseEPDesc+0xc0>
 80089b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b6:	4313      	orrs	r3, r2
 80089b8:	b21b      	sxth	r3, r3
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d116      	bne.n	80089f8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	78db      	ldrb	r3, [r3, #3]
 80089ce:	f003 0303 	and.w	r3, r3, #3
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d005      	beq.n	80089e2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	78db      	ldrb	r3, [r3, #3]
 80089da:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d127      	bne.n	8008a32 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	799b      	ldrb	r3, [r3, #6]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <USBH_ParseEPDesc+0xfc>
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	799b      	ldrb	r3, [r3, #6]
 80089ee:	2b10      	cmp	r3, #16
 80089f0:	d91f      	bls.n	8008a32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80089f2:	2303      	movs	r3, #3
 80089f4:	75fb      	strb	r3, [r7, #23]
 80089f6:	e01c      	b.n	8008a32 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	78db      	ldrb	r3, [r3, #3]
 80089fc:	f003 0303 	and.w	r3, r3, #3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d10a      	bne.n	8008a1a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	799b      	ldrb	r3, [r3, #6]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <USBH_ParseEPDesc+0x11e>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	799b      	ldrb	r3, [r3, #6]
 8008a10:	2b10      	cmp	r3, #16
 8008a12:	d90e      	bls.n	8008a32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a14:	2303      	movs	r3, #3
 8008a16:	75fb      	strb	r3, [r7, #23]
 8008a18:	e00b      	b.n	8008a32 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	78db      	ldrb	r3, [r3, #3]
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d105      	bne.n	8008a32 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	799b      	ldrb	r3, [r3, #6]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3301      	adds	r3, #1
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b03      	cmp	r3, #3
 8008a56:	d120      	bne.n	8008a9a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	1e9a      	subs	r2, r3, #2
 8008a5e:	88fb      	ldrh	r3, [r7, #6]
 8008a60:	4293      	cmp	r3, r2
 8008a62:	bf28      	it	cs
 8008a64:	4613      	movcs	r3, r2
 8008a66:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3302      	adds	r3, #2
 8008a6c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008a6e:	2300      	movs	r3, #0
 8008a70:	82fb      	strh	r3, [r7, #22]
 8008a72:	e00b      	b.n	8008a8c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008a74:	8afb      	ldrh	r3, [r7, #22]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	781a      	ldrb	r2, [r3, #0]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	3301      	adds	r3, #1
 8008a84:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008a86:	8afb      	ldrh	r3, [r7, #22]
 8008a88:	3302      	adds	r3, #2
 8008a8a:	82fb      	strh	r3, [r7, #22]
 8008a8c:	8afa      	ldrh	r2, [r7, #22]
 8008a8e:	8abb      	ldrh	r3, [r7, #20]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d3ef      	bcc.n	8008a74 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2200      	movs	r2, #0
 8008a98:	701a      	strb	r2, [r3, #0]
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b085      	sub	sp, #20
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	881a      	ldrh	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	4413      	add	r3, r2
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4413      	add	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ace:	68fb      	ldr	r3, [r7, #12]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008aea:	2301      	movs	r3, #1
 8008aec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	789b      	ldrb	r3, [r3, #2]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d002      	beq.n	8008afc <USBH_CtlReq+0x20>
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d00f      	beq.n	8008b1a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008afa:	e027      	b.n	8008b4c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	88fa      	ldrh	r2, [r7, #6]
 8008b06:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2202      	movs	r2, #2
 8008b12:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008b14:	2301      	movs	r3, #1
 8008b16:	75fb      	strb	r3, [r7, #23]
      break;
 8008b18:	e018      	b.n	8008b4c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f81c 	bl	8008b58 <USBH_HandleControl>
 8008b20:	4603      	mov	r3, r0
 8008b22:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <USBH_CtlReq+0x54>
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d106      	bne.n	8008b3e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2201      	movs	r2, #1
 8008b34:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	761a      	strb	r2, [r3, #24]
      break;
 8008b3c:	e005      	b.n	8008b4a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d102      	bne.n	8008b4a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2201      	movs	r2, #1
 8008b48:	709a      	strb	r2, [r3, #2]
      break;
 8008b4a:	bf00      	nop
  }
  return status;
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af02      	add	r7, sp, #8
 8008b5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b60:	2301      	movs	r3, #1
 8008b62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	7e1b      	ldrb	r3, [r3, #24]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	2b0a      	cmp	r3, #10
 8008b70:	f200 8156 	bhi.w	8008e20 <USBH_HandleControl+0x2c8>
 8008b74:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <USBH_HandleControl+0x24>)
 8008b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7a:	bf00      	nop
 8008b7c:	08008ba9 	.word	0x08008ba9
 8008b80:	08008bc3 	.word	0x08008bc3
 8008b84:	08008c2d 	.word	0x08008c2d
 8008b88:	08008c53 	.word	0x08008c53
 8008b8c:	08008c8b 	.word	0x08008c8b
 8008b90:	08008cb5 	.word	0x08008cb5
 8008b94:	08008d07 	.word	0x08008d07
 8008b98:	08008d29 	.word	0x08008d29
 8008b9c:	08008d65 	.word	0x08008d65
 8008ba0:	08008d8b 	.word	0x08008d8b
 8008ba4:	08008dc9 	.word	0x08008dc9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f103 0110 	add.w	r1, r3, #16
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	795b      	ldrb	r3, [r3, #5]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f943 	bl	8008e40 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	761a      	strb	r2, [r3, #24]
      break;
 8008bc0:	e139      	b.n	8008e36 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	795b      	ldrb	r3, [r3, #5]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fcc5 	bl	8009558 <USBH_LL_GetURBState>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d11e      	bne.n	8008c16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	7c1b      	ldrb	r3, [r3, #16]
 8008bdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008be0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	8adb      	ldrh	r3, [r3, #22]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008bea:	7b7b      	ldrb	r3, [r7, #13]
 8008bec:	2b80      	cmp	r3, #128	; 0x80
 8008bee:	d103      	bne.n	8008bf8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2203      	movs	r2, #3
 8008bf4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008bf6:	e115      	b.n	8008e24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2205      	movs	r2, #5
 8008bfc:	761a      	strb	r2, [r3, #24]
      break;
 8008bfe:	e111      	b.n	8008e24 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008c00:	7b7b      	ldrb	r3, [r7, #13]
 8008c02:	2b80      	cmp	r3, #128	; 0x80
 8008c04:	d103      	bne.n	8008c0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2209      	movs	r2, #9
 8008c0a:	761a      	strb	r2, [r3, #24]
      break;
 8008c0c:	e10a      	b.n	8008e24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2207      	movs	r2, #7
 8008c12:	761a      	strb	r2, [r3, #24]
      break;
 8008c14:	e106      	b.n	8008e24 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d003      	beq.n	8008c24 <USBH_HandleControl+0xcc>
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	f040 8100 	bne.w	8008e24 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	220b      	movs	r2, #11
 8008c28:	761a      	strb	r2, [r3, #24]
      break;
 8008c2a:	e0fb      	b.n	8008e24 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6899      	ldr	r1, [r3, #8]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	899a      	ldrh	r2, [r3, #12]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	791b      	ldrb	r3, [r3, #4]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f93a 	bl	8008ebe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	761a      	strb	r2, [r3, #24]
      break;
 8008c50:	e0f1      	b.n	8008e36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	791b      	ldrb	r3, [r3, #4]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fc7d 	bl	8009558 <USBH_LL_GetURBState>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d102      	bne.n	8008c6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2209      	movs	r2, #9
 8008c6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b05      	cmp	r3, #5
 8008c72:	d102      	bne.n	8008c7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008c74:	2303      	movs	r3, #3
 8008c76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c78:	e0d6      	b.n	8008e28 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	f040 80d3 	bne.w	8008e28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	220b      	movs	r2, #11
 8008c86:	761a      	strb	r2, [r3, #24]
      break;
 8008c88:	e0ce      	b.n	8008e28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6899      	ldr	r1, [r3, #8]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	899a      	ldrh	r2, [r3, #12]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	795b      	ldrb	r3, [r3, #5]
 8008c96:	2001      	movs	r0, #1
 8008c98:	9000      	str	r0, [sp, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f8ea 	bl	8008e74 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2206      	movs	r2, #6
 8008cb0:	761a      	strb	r2, [r3, #24]
      break;
 8008cb2:	e0c0      	b.n	8008e36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	795b      	ldrb	r3, [r3, #5]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fc4c 	bl	8009558 <USBH_LL_GetURBState>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d103      	bne.n	8008cd2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2207      	movs	r2, #7
 8008cce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cd0:	e0ac      	b.n	8008e2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b05      	cmp	r3, #5
 8008cd6:	d105      	bne.n	8008ce4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	220c      	movs	r2, #12
 8008cdc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce2:	e0a3      	b.n	8008e2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d103      	bne.n	8008cf2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2205      	movs	r2, #5
 8008cee:	761a      	strb	r2, [r3, #24]
      break;
 8008cf0:	e09c      	b.n	8008e2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	2b04      	cmp	r3, #4
 8008cf6:	f040 8099 	bne.w	8008e2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	220b      	movs	r2, #11
 8008cfe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008d00:	2302      	movs	r3, #2
 8008d02:	73fb      	strb	r3, [r7, #15]
      break;
 8008d04:	e092      	b.n	8008e2c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	791b      	ldrb	r3, [r3, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f8d5 	bl	8008ebe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2208      	movs	r2, #8
 8008d24:	761a      	strb	r2, [r3, #24]

      break;
 8008d26:	e086      	b.n	8008e36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	791b      	ldrb	r3, [r3, #4]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fc12 	bl	8009558 <USBH_LL_GetURBState>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d105      	bne.n	8008d4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	220d      	movs	r2, #13
 8008d42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d48:	e072      	b.n	8008e30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d103      	bne.n	8008d58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	220b      	movs	r2, #11
 8008d54:	761a      	strb	r2, [r3, #24]
      break;
 8008d56:	e06b      	b.n	8008e30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b05      	cmp	r3, #5
 8008d5c:	d168      	bne.n	8008e30 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	73fb      	strb	r3, [r7, #15]
      break;
 8008d62:	e065      	b.n	8008e30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	795b      	ldrb	r3, [r3, #5]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	9200      	str	r2, [sp, #0]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	2100      	movs	r1, #0
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f87f 	bl	8008e74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	220a      	movs	r2, #10
 8008d86:	761a      	strb	r2, [r3, #24]
      break;
 8008d88:	e055      	b.n	8008e36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	795b      	ldrb	r3, [r3, #5]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fbe1 	bl	8009558 <USBH_LL_GetURBState>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d105      	bne.n	8008dac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	220d      	movs	r2, #13
 8008da8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008daa:	e043      	b.n	8008e34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d103      	bne.n	8008dba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2209      	movs	r2, #9
 8008db6:	761a      	strb	r2, [r3, #24]
      break;
 8008db8:	e03c      	b.n	8008e34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d139      	bne.n	8008e34 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	220b      	movs	r2, #11
 8008dc4:	761a      	strb	r2, [r3, #24]
      break;
 8008dc6:	e035      	b.n	8008e34 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	7e5b      	ldrb	r3, [r3, #25]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	765a      	strb	r2, [r3, #25]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	7e5b      	ldrb	r3, [r3, #25]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d806      	bhi.n	8008dea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008de8:	e025      	b.n	8008e36 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008df0:	2106      	movs	r1, #6
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	795b      	ldrb	r3, [r3, #5]
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f90c 	bl	8009020 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	791b      	ldrb	r3, [r3, #4]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f906 	bl	8009020 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e1e:	e00a      	b.n	8008e36 <USBH_HandleControl+0x2de>

    default:
      break;
 8008e20:	bf00      	nop
 8008e22:	e008      	b.n	8008e36 <USBH_HandleControl+0x2de>
      break;
 8008e24:	bf00      	nop
 8008e26:	e006      	b.n	8008e36 <USBH_HandleControl+0x2de>
      break;
 8008e28:	bf00      	nop
 8008e2a:	e004      	b.n	8008e36 <USBH_HandleControl+0x2de>
      break;
 8008e2c:	bf00      	nop
 8008e2e:	e002      	b.n	8008e36 <USBH_HandleControl+0x2de>
      break;
 8008e30:	bf00      	nop
 8008e32:	e000      	b.n	8008e36 <USBH_HandleControl+0x2de>
      break;
 8008e34:	bf00      	nop
  }

  return status;
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b088      	sub	sp, #32
 8008e44:	af04      	add	r7, sp, #16
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e4e:	79f9      	ldrb	r1, [r7, #7]
 8008e50:	2300      	movs	r3, #0
 8008e52:	9303      	str	r3, [sp, #12]
 8008e54:	2308      	movs	r3, #8
 8008e56:	9302      	str	r3, [sp, #8]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	2300      	movs	r3, #0
 8008e62:	2200      	movs	r2, #0
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 fb46 	bl	80094f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af04      	add	r7, sp, #16
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	4611      	mov	r1, r2
 8008e80:	461a      	mov	r2, r3
 8008e82:	460b      	mov	r3, r1
 8008e84:	80fb      	strh	r3, [r7, #6]
 8008e86:	4613      	mov	r3, r2
 8008e88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e98:	7979      	ldrb	r1, [r7, #5]
 8008e9a:	7e3b      	ldrb	r3, [r7, #24]
 8008e9c:	9303      	str	r3, [sp, #12]
 8008e9e:	88fb      	ldrh	r3, [r7, #6]
 8008ea0:	9302      	str	r3, [sp, #8]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	2200      	movs	r2, #0
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fb21 	bl	80094f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b088      	sub	sp, #32
 8008ec2:	af04      	add	r7, sp, #16
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	461a      	mov	r2, r3
 8008ecc:	460b      	mov	r3, r1
 8008ece:	80fb      	strh	r3, [r7, #6]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ed4:	7979      	ldrb	r1, [r7, #5]
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	9303      	str	r3, [sp, #12]
 8008eda:	88fb      	ldrh	r3, [r7, #6]
 8008edc:	9302      	str	r3, [sp, #8]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	9301      	str	r3, [sp, #4]
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	2201      	movs	r2, #1
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 fb03 	bl	80094f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ef0:	2300      	movs	r3, #0

}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b088      	sub	sp, #32
 8008efe:	af04      	add	r7, sp, #16
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	4611      	mov	r1, r2
 8008f06:	461a      	mov	r2, r3
 8008f08:	460b      	mov	r3, r1
 8008f0a:	80fb      	strh	r3, [r7, #6]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f1e:	7979      	ldrb	r1, [r7, #5]
 8008f20:	7e3b      	ldrb	r3, [r7, #24]
 8008f22:	9303      	str	r3, [sp, #12]
 8008f24:	88fb      	ldrh	r3, [r7, #6]
 8008f26:	9302      	str	r3, [sp, #8]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	9301      	str	r3, [sp, #4]
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	2302      	movs	r3, #2
 8008f32:	2200      	movs	r2, #0
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 fade 	bl	80094f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af04      	add	r7, sp, #16
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	4611      	mov	r1, r2
 8008f50:	461a      	mov	r2, r3
 8008f52:	460b      	mov	r3, r1
 8008f54:	80fb      	strh	r3, [r7, #6]
 8008f56:	4613      	mov	r3, r2
 8008f58:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f5a:	7979      	ldrb	r1, [r7, #5]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9303      	str	r3, [sp, #12]
 8008f60:	88fb      	ldrh	r3, [r7, #6]
 8008f62:	9302      	str	r3, [sp, #8]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	9301      	str	r3, [sp, #4]
 8008f68:	2301      	movs	r3, #1
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	2201      	movs	r2, #1
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 fac0 	bl	80094f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af04      	add	r7, sp, #16
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4603      	mov	r3, r0
 8008f90:	70fb      	strb	r3, [r7, #3]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70bb      	strb	r3, [r7, #2]
 8008f96:	4613      	mov	r3, r2
 8008f98:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008f9a:	7878      	ldrb	r0, [r7, #1]
 8008f9c:	78ba      	ldrb	r2, [r7, #2]
 8008f9e:	78f9      	ldrb	r1, [r7, #3]
 8008fa0:	8b3b      	ldrh	r3, [r7, #24]
 8008fa2:	9302      	str	r3, [sp, #8]
 8008fa4:	7d3b      	ldrb	r3, [r7, #20]
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	7c3b      	ldrb	r3, [r7, #16]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	4603      	mov	r3, r0
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa53 	bl	800945a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa72 	bl	80094b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f836 	bl	800905c <USBH_GetFreePipe>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ff4:	89fb      	ldrh	r3, [r7, #14]
 8008ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d00a      	beq.n	8009014 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ffe:	78fa      	ldrb	r2, [r7, #3]
 8009000:	89fb      	ldrh	r3, [r7, #14]
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	33e0      	adds	r3, #224	; 0xe0
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	440b      	add	r3, r1
 8009012:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009014:	89fb      	ldrh	r3, [r7, #14]
 8009016:	b2db      	uxtb	r3, r3
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	2b0f      	cmp	r3, #15
 8009030:	d80d      	bhi.n	800904e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009032:	78fb      	ldrb	r3, [r7, #3]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	33e0      	adds	r3, #224	; 0xe0
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	33e0      	adds	r3, #224	; 0xe0
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	440b      	add	r3, r1
 800904c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
 800906c:	e00f      	b.n	800908e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	33e0      	adds	r3, #224	; 0xe0
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	b29b      	uxth	r3, r3
 8009086:	e007      	b.n	8009098 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	3301      	adds	r3, #1
 800908c:	73fb      	strb	r3, [r7, #15]
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	2b0f      	cmp	r3, #15
 8009092:	d9ec      	bls.n	800906e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009094:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009098:	4618      	mov	r0, r3
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80090a8:	2201      	movs	r2, #1
 80090aa:	490e      	ldr	r1, [pc, #56]	; (80090e4 <MX_USB_HOST_Init+0x40>)
 80090ac:	480e      	ldr	r0, [pc, #56]	; (80090e8 <MX_USB_HOST_Init+0x44>)
 80090ae:	f7fe fba7 	bl	8007800 <USBH_Init>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80090b8:	f7f7 fd36 	bl	8000b28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80090bc:	490b      	ldr	r1, [pc, #44]	; (80090ec <MX_USB_HOST_Init+0x48>)
 80090be:	480a      	ldr	r0, [pc, #40]	; (80090e8 <MX_USB_HOST_Init+0x44>)
 80090c0:	f7fe fc2c 	bl	800791c <USBH_RegisterClass>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80090ca:	f7f7 fd2d 	bl	8000b28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80090ce:	4806      	ldr	r0, [pc, #24]	; (80090e8 <MX_USB_HOST_Init+0x44>)
 80090d0:	f7fe fcb0 	bl	8007a34 <USBH_Start>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80090da:	f7f7 fd25 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80090de:	bf00      	nop
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	08009105 	.word	0x08009105
 80090e8:	2000025c 	.word	0x2000025c
 80090ec:	2000000c 	.word	0x2000000c

080090f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80090f4:	4802      	ldr	r0, [pc, #8]	; (8009100 <MX_USB_HOST_Process+0x10>)
 80090f6:	f7fe fcad 	bl	8007a54 <USBH_Process>
}
 80090fa:	bf00      	nop
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	2000025c 	.word	0x2000025c

08009104 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	3b01      	subs	r3, #1
 8009114:	2b04      	cmp	r3, #4
 8009116:	d819      	bhi.n	800914c <USBH_UserProcess+0x48>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <USBH_UserProcess+0x1c>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	0800914d 	.word	0x0800914d
 8009124:	0800913d 	.word	0x0800913d
 8009128:	0800914d 	.word	0x0800914d
 800912c:	08009145 	.word	0x08009145
 8009130:	08009135 	.word	0x08009135
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <USBH_UserProcess+0x58>)
 8009136:	2203      	movs	r2, #3
 8009138:	701a      	strb	r2, [r3, #0]
  break;
 800913a:	e008      	b.n	800914e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800913c:	4b07      	ldr	r3, [pc, #28]	; (800915c <USBH_UserProcess+0x58>)
 800913e:	2202      	movs	r2, #2
 8009140:	701a      	strb	r2, [r3, #0]
  break;
 8009142:	e004      	b.n	800914e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009144:	4b05      	ldr	r3, [pc, #20]	; (800915c <USBH_UserProcess+0x58>)
 8009146:	2201      	movs	r2, #1
 8009148:	701a      	strb	r2, [r3, #0]
  break;
 800914a:	e000      	b.n	800914e <USBH_UserProcess+0x4a>

  default:
  break;
 800914c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	20000634 	.word	0x20000634

08009160 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08a      	sub	sp, #40	; 0x28
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009168:	f107 0314 	add.w	r3, r7, #20
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	605a      	str	r2, [r3, #4]
 8009172:	609a      	str	r2, [r3, #8]
 8009174:	60da      	str	r2, [r3, #12]
 8009176:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009180:	d147      	bne.n	8009212 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009182:	2300      	movs	r3, #0
 8009184:	613b      	str	r3, [r7, #16]
 8009186:	4b25      	ldr	r3, [pc, #148]	; (800921c <HAL_HCD_MspInit+0xbc>)
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	4a24      	ldr	r2, [pc, #144]	; (800921c <HAL_HCD_MspInit+0xbc>)
 800918c:	f043 0301 	orr.w	r3, r3, #1
 8009190:	6313      	str	r3, [r2, #48]	; 0x30
 8009192:	4b22      	ldr	r3, [pc, #136]	; (800921c <HAL_HCD_MspInit+0xbc>)
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	613b      	str	r3, [r7, #16]
 800919c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800919e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	4619      	mov	r1, r3
 80091b2:	481b      	ldr	r0, [pc, #108]	; (8009220 <HAL_HCD_MspInit+0xc0>)
 80091b4:	f7f8 fbd6 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80091b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80091bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091be:	2302      	movs	r3, #2
 80091c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091c6:	2300      	movs	r3, #0
 80091c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091ca:	230a      	movs	r3, #10
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091ce:	f107 0314 	add.w	r3, r7, #20
 80091d2:	4619      	mov	r1, r3
 80091d4:	4812      	ldr	r0, [pc, #72]	; (8009220 <HAL_HCD_MspInit+0xc0>)
 80091d6:	f7f8 fbc5 	bl	8001964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091da:	4b10      	ldr	r3, [pc, #64]	; (800921c <HAL_HCD_MspInit+0xbc>)
 80091dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091de:	4a0f      	ldr	r2, [pc, #60]	; (800921c <HAL_HCD_MspInit+0xbc>)
 80091e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e4:	6353      	str	r3, [r2, #52]	; 0x34
 80091e6:	2300      	movs	r3, #0
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	4b0c      	ldr	r3, [pc, #48]	; (800921c <HAL_HCD_MspInit+0xbc>)
 80091ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ee:	4a0b      	ldr	r2, [pc, #44]	; (800921c <HAL_HCD_MspInit+0xbc>)
 80091f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091f4:	6453      	str	r3, [r2, #68]	; 0x44
 80091f6:	4b09      	ldr	r3, [pc, #36]	; (800921c <HAL_HCD_MspInit+0xbc>)
 80091f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009202:	2200      	movs	r2, #0
 8009204:	2100      	movs	r1, #0
 8009206:	2043      	movs	r0, #67	; 0x43
 8009208:	f7f8 f88b 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800920c:	2043      	movs	r0, #67	; 0x43
 800920e:	f7f8 f8a4 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009212:	bf00      	nop
 8009214:	3728      	adds	r7, #40	; 0x28
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	40023800 	.word	0x40023800
 8009220:	40020000 	.word	0x40020000

08009224 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe ffed 	bl	8008212 <USBH_LL_IncTimer>
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff f825 	bl	800829e <USBH_LL_Connect>
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800926a:	4618      	mov	r0, r3
 800926c:	f7ff f82e 	bl	80082cc <USBH_LL_Disconnect>
}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
 8009284:	4613      	mov	r3, r2
 8009286:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe ffdf 	bl	8008266 <USBH_LL_PortEnabled>
}
 80092a8:	bf00      	nop
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe ffdf 	bl	8008282 <USBH_LL_PortDisabled>
}
 80092c4:	bf00      	nop
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d12a      	bne.n	8009334 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80092de:	4a18      	ldr	r2, [pc, #96]	; (8009340 <USBH_LL_Init+0x74>)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a15      	ldr	r2, [pc, #84]	; (8009340 <USBH_LL_Init+0x74>)
 80092ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092ee:	4b14      	ldr	r3, [pc, #80]	; (8009340 <USBH_LL_Init+0x74>)
 80092f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80092f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80092f6:	4b12      	ldr	r3, [pc, #72]	; (8009340 <USBH_LL_Init+0x74>)
 80092f8:	2208      	movs	r2, #8
 80092fa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80092fc:	4b10      	ldr	r3, [pc, #64]	; (8009340 <USBH_LL_Init+0x74>)
 80092fe:	2201      	movs	r2, #1
 8009300:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009302:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <USBH_LL_Init+0x74>)
 8009304:	2200      	movs	r2, #0
 8009306:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009308:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <USBH_LL_Init+0x74>)
 800930a:	2202      	movs	r2, #2
 800930c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800930e:	4b0c      	ldr	r3, [pc, #48]	; (8009340 <USBH_LL_Init+0x74>)
 8009310:	2200      	movs	r2, #0
 8009312:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009314:	480a      	ldr	r0, [pc, #40]	; (8009340 <USBH_LL_Init+0x74>)
 8009316:	f7f8 fcda 	bl	8001cce <HAL_HCD_Init>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009320:	f7f7 fc02 	bl	8000b28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009324:	4806      	ldr	r0, [pc, #24]	; (8009340 <USBH_LL_Init+0x74>)
 8009326:	f7f9 f8be 	bl	80024a6 <HAL_HCD_GetCurrentFrame>
 800932a:	4603      	mov	r3, r0
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7fe ff60 	bl	80081f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000638 	.word	0x20000638

08009344 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800935a:	4618      	mov	r0, r3
 800935c:	f7f9 f82d 	bl	80023ba <HAL_HCD_Start>
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	4618      	mov	r0, r3
 8009368:	f000 f95c 	bl	8009624 <USBH_Get_USB_Status>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009370:	7bbb      	ldrb	r3, [r7, #14]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009390:	4618      	mov	r0, r3
 8009392:	f7f9 f835 	bl	8002400 <HAL_HCD_Stop>
 8009396:	4603      	mov	r3, r0
 8009398:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	4618      	mov	r0, r3
 800939e:	f000 f941 	bl	8009624 <USBH_Get_USB_Status>
 80093a2:	4603      	mov	r3, r0
 80093a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80093b8:	2301      	movs	r3, #1
 80093ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7f9 f87d 	bl	80024c2 <HAL_HCD_GetCurrentSpeed>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d00c      	beq.n	80093e8 <USBH_LL_GetSpeed+0x38>
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d80d      	bhi.n	80093ee <USBH_LL_GetSpeed+0x3e>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d002      	beq.n	80093dc <USBH_LL_GetSpeed+0x2c>
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d003      	beq.n	80093e2 <USBH_LL_GetSpeed+0x32>
 80093da:	e008      	b.n	80093ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80093dc:	2300      	movs	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]
    break;
 80093e0:	e008      	b.n	80093f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80093e2:	2301      	movs	r3, #1
 80093e4:	73fb      	strb	r3, [r7, #15]
    break;
 80093e6:	e005      	b.n	80093f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80093e8:	2302      	movs	r3, #2
 80093ea:	73fb      	strb	r3, [r7, #15]
    break;
 80093ec:	e002      	b.n	80093f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80093ee:	2301      	movs	r3, #1
 80093f0:	73fb      	strb	r3, [r7, #15]
    break;
 80093f2:	bf00      	nop
  }
  return  speed;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009414:	4618      	mov	r0, r3
 8009416:	f7f9 f810 	bl	800243a <HAL_HCD_ResetPort>
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 f8ff 	bl	8009624 <USBH_Get_USB_Status>
 8009426:	4603      	mov	r3, r0
 8009428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800942a:	7bbb      	ldrb	r3, [r7, #14]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009446:	78fa      	ldrb	r2, [r7, #3]
 8009448:	4611      	mov	r1, r2
 800944a:	4618      	mov	r0, r3
 800944c:	f7f9 f817 	bl	800247e <HAL_HCD_HC_GetXferCount>
 8009450:	4603      	mov	r3, r0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800945a:	b590      	push	{r4, r7, lr}
 800945c:	b089      	sub	sp, #36	; 0x24
 800945e:	af04      	add	r7, sp, #16
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	4608      	mov	r0, r1
 8009464:	4611      	mov	r1, r2
 8009466:	461a      	mov	r2, r3
 8009468:	4603      	mov	r3, r0
 800946a:	70fb      	strb	r3, [r7, #3]
 800946c:	460b      	mov	r3, r1
 800946e:	70bb      	strb	r3, [r7, #2]
 8009470:	4613      	mov	r3, r2
 8009472:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009482:	787c      	ldrb	r4, [r7, #1]
 8009484:	78ba      	ldrb	r2, [r7, #2]
 8009486:	78f9      	ldrb	r1, [r7, #3]
 8009488:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800948a:	9302      	str	r3, [sp, #8]
 800948c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009490:	9301      	str	r3, [sp, #4]
 8009492:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	4623      	mov	r3, r4
 800949a:	f7f8 fc7a 	bl	8001d92 <HAL_HCD_HC_Init>
 800949e:	4603      	mov	r3, r0
 80094a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 f8bd 	bl	8009624 <USBH_Get_USB_Status>
 80094aa:	4603      	mov	r3, r0
 80094ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd90      	pop	{r4, r7, pc}

080094b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094d2:	78fa      	ldrb	r2, [r7, #3]
 80094d4:	4611      	mov	r1, r2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7f8 fcea 	bl	8001eb0 <HAL_HCD_HC_Halt>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f89e 	bl	8009624 <USBH_Get_USB_Status>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80094f6:	b590      	push	{r4, r7, lr}
 80094f8:	b089      	sub	sp, #36	; 0x24
 80094fa:	af04      	add	r7, sp, #16
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	4608      	mov	r0, r1
 8009500:	4611      	mov	r1, r2
 8009502:	461a      	mov	r2, r3
 8009504:	4603      	mov	r3, r0
 8009506:	70fb      	strb	r3, [r7, #3]
 8009508:	460b      	mov	r3, r1
 800950a:	70bb      	strb	r3, [r7, #2]
 800950c:	4613      	mov	r3, r2
 800950e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800951e:	787c      	ldrb	r4, [r7, #1]
 8009520:	78ba      	ldrb	r2, [r7, #2]
 8009522:	78f9      	ldrb	r1, [r7, #3]
 8009524:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009528:	9303      	str	r3, [sp, #12]
 800952a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800952c:	9302      	str	r3, [sp, #8]
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	4623      	mov	r3, r4
 800953a:	f7f8 fcdd 	bl	8001ef8 <HAL_HCD_HC_SubmitRequest>
 800953e:	4603      	mov	r3, r0
 8009540:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	4618      	mov	r0, r3
 8009546:	f000 f86d 	bl	8009624 <USBH_Get_USB_Status>
 800954a:	4603      	mov	r3, r0
 800954c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800954e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	bd90      	pop	{r4, r7, pc}

08009558 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800956a:	78fa      	ldrb	r2, [r7, #3]
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f7f8 ff71 	bl	8002456 <HAL_HCD_HC_GetURBState>
 8009574:	4603      	mov	r3, r0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	460b      	mov	r3, r1
 8009588:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009590:	2b01      	cmp	r3, #1
 8009592:	d103      	bne.n	800959c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	4618      	mov	r0, r3
 8009598:	f000 f870 	bl	800967c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800959c:	20c8      	movs	r0, #200	; 0xc8
 800959e:	f7f7 fdc1 	bl	8001124 <HAL_Delay>
  return USBH_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
 80095b8:	4613      	mov	r3, r2
 80095ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	212c      	movs	r1, #44	; 0x2c
 80095ca:	fb01 f303 	mul.w	r3, r1, r3
 80095ce:	4413      	add	r3, r2
 80095d0:	333b      	adds	r3, #59	; 0x3b
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d009      	beq.n	80095ec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	212c      	movs	r1, #44	; 0x2c
 80095de:	fb01 f303 	mul.w	r3, r1, r3
 80095e2:	4413      	add	r3, r2
 80095e4:	3354      	adds	r3, #84	; 0x54
 80095e6:	78ba      	ldrb	r2, [r7, #2]
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	e008      	b.n	80095fe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	212c      	movs	r1, #44	; 0x2c
 80095f2:	fb01 f303 	mul.w	r3, r1, r3
 80095f6:	4413      	add	r3, r2
 80095f8:	3355      	adds	r3, #85	; 0x55
 80095fa:	78ba      	ldrb	r2, [r7, #2]
 80095fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7f7 fd85 	bl	8001124 <HAL_Delay>
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	2b03      	cmp	r3, #3
 8009636:	d817      	bhi.n	8009668 <USBH_Get_USB_Status+0x44>
 8009638:	a201      	add	r2, pc, #4	; (adr r2, 8009640 <USBH_Get_USB_Status+0x1c>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	08009651 	.word	0x08009651
 8009644:	08009657 	.word	0x08009657
 8009648:	0800965d 	.word	0x0800965d
 800964c:	08009663 	.word	0x08009663
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
    break;
 8009654:	e00b      	b.n	800966e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009656:	2302      	movs	r3, #2
 8009658:	73fb      	strb	r3, [r7, #15]
    break;
 800965a:	e008      	b.n	800966e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800965c:	2301      	movs	r3, #1
 800965e:	73fb      	strb	r3, [r7, #15]
    break;
 8009660:	e005      	b.n	800966e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009662:	2302      	movs	r3, #2
 8009664:	73fb      	strb	r3, [r7, #15]
    break;
 8009666:	e002      	b.n	800966e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009668:	2302      	movs	r3, #2
 800966a:	73fb      	strb	r3, [r7, #15]
    break;
 800966c:	bf00      	nop
  }
  return usb_status;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d102      	bne.n	8009696 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009690:	2300      	movs	r3, #0
 8009692:	73fb      	strb	r3, [r7, #15]
 8009694:	e001      	b.n	800969a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009696:	2301      	movs	r3, #1
 8009698:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	461a      	mov	r2, r3
 800969e:	2101      	movs	r1, #1
 80096a0:	4803      	ldr	r0, [pc, #12]	; (80096b0 <MX_DriverVbusFS+0x34>)
 80096a2:	f7f8 fafb 	bl	8001c9c <HAL_GPIO_WritePin>
}
 80096a6:	bf00      	nop
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40020800 	.word	0x40020800

080096b4 <__errno>:
 80096b4:	4b01      	ldr	r3, [pc, #4]	; (80096bc <__errno+0x8>)
 80096b6:	6818      	ldr	r0, [r3, #0]
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	2000002c 	.word	0x2000002c

080096c0 <__libc_init_array>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	4d0d      	ldr	r5, [pc, #52]	; (80096f8 <__libc_init_array+0x38>)
 80096c4:	4c0d      	ldr	r4, [pc, #52]	; (80096fc <__libc_init_array+0x3c>)
 80096c6:	1b64      	subs	r4, r4, r5
 80096c8:	10a4      	asrs	r4, r4, #2
 80096ca:	2600      	movs	r6, #0
 80096cc:	42a6      	cmp	r6, r4
 80096ce:	d109      	bne.n	80096e4 <__libc_init_array+0x24>
 80096d0:	4d0b      	ldr	r5, [pc, #44]	; (8009700 <__libc_init_array+0x40>)
 80096d2:	4c0c      	ldr	r4, [pc, #48]	; (8009704 <__libc_init_array+0x44>)
 80096d4:	f000 f92e 	bl	8009934 <_init>
 80096d8:	1b64      	subs	r4, r4, r5
 80096da:	10a4      	asrs	r4, r4, #2
 80096dc:	2600      	movs	r6, #0
 80096de:	42a6      	cmp	r6, r4
 80096e0:	d105      	bne.n	80096ee <__libc_init_array+0x2e>
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e8:	4798      	blx	r3
 80096ea:	3601      	adds	r6, #1
 80096ec:	e7ee      	b.n	80096cc <__libc_init_array+0xc>
 80096ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f2:	4798      	blx	r3
 80096f4:	3601      	adds	r6, #1
 80096f6:	e7f2      	b.n	80096de <__libc_init_array+0x1e>
 80096f8:	08009978 	.word	0x08009978
 80096fc:	08009978 	.word	0x08009978
 8009700:	08009978 	.word	0x08009978
 8009704:	0800997c 	.word	0x0800997c

08009708 <malloc>:
 8009708:	4b02      	ldr	r3, [pc, #8]	; (8009714 <malloc+0xc>)
 800970a:	4601      	mov	r1, r0
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	f000 b87f 	b.w	8009810 <_malloc_r>
 8009712:	bf00      	nop
 8009714:	2000002c 	.word	0x2000002c

08009718 <free>:
 8009718:	4b02      	ldr	r3, [pc, #8]	; (8009724 <free+0xc>)
 800971a:	4601      	mov	r1, r0
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	f000 b80b 	b.w	8009738 <_free_r>
 8009722:	bf00      	nop
 8009724:	2000002c 	.word	0x2000002c

08009728 <memset>:
 8009728:	4402      	add	r2, r0
 800972a:	4603      	mov	r3, r0
 800972c:	4293      	cmp	r3, r2
 800972e:	d100      	bne.n	8009732 <memset+0xa>
 8009730:	4770      	bx	lr
 8009732:	f803 1b01 	strb.w	r1, [r3], #1
 8009736:	e7f9      	b.n	800972c <memset+0x4>

08009738 <_free_r>:
 8009738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800973a:	2900      	cmp	r1, #0
 800973c:	d044      	beq.n	80097c8 <_free_r+0x90>
 800973e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009742:	9001      	str	r0, [sp, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	f1a1 0404 	sub.w	r4, r1, #4
 800974a:	bfb8      	it	lt
 800974c:	18e4      	addlt	r4, r4, r3
 800974e:	f000 f8e3 	bl	8009918 <__malloc_lock>
 8009752:	4a1e      	ldr	r2, [pc, #120]	; (80097cc <_free_r+0x94>)
 8009754:	9801      	ldr	r0, [sp, #4]
 8009756:	6813      	ldr	r3, [r2, #0]
 8009758:	b933      	cbnz	r3, 8009768 <_free_r+0x30>
 800975a:	6063      	str	r3, [r4, #4]
 800975c:	6014      	str	r4, [r2, #0]
 800975e:	b003      	add	sp, #12
 8009760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009764:	f000 b8de 	b.w	8009924 <__malloc_unlock>
 8009768:	42a3      	cmp	r3, r4
 800976a:	d908      	bls.n	800977e <_free_r+0x46>
 800976c:	6825      	ldr	r5, [r4, #0]
 800976e:	1961      	adds	r1, r4, r5
 8009770:	428b      	cmp	r3, r1
 8009772:	bf01      	itttt	eq
 8009774:	6819      	ldreq	r1, [r3, #0]
 8009776:	685b      	ldreq	r3, [r3, #4]
 8009778:	1949      	addeq	r1, r1, r5
 800977a:	6021      	streq	r1, [r4, #0]
 800977c:	e7ed      	b.n	800975a <_free_r+0x22>
 800977e:	461a      	mov	r2, r3
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	b10b      	cbz	r3, 8009788 <_free_r+0x50>
 8009784:	42a3      	cmp	r3, r4
 8009786:	d9fa      	bls.n	800977e <_free_r+0x46>
 8009788:	6811      	ldr	r1, [r2, #0]
 800978a:	1855      	adds	r5, r2, r1
 800978c:	42a5      	cmp	r5, r4
 800978e:	d10b      	bne.n	80097a8 <_free_r+0x70>
 8009790:	6824      	ldr	r4, [r4, #0]
 8009792:	4421      	add	r1, r4
 8009794:	1854      	adds	r4, r2, r1
 8009796:	42a3      	cmp	r3, r4
 8009798:	6011      	str	r1, [r2, #0]
 800979a:	d1e0      	bne.n	800975e <_free_r+0x26>
 800979c:	681c      	ldr	r4, [r3, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	6053      	str	r3, [r2, #4]
 80097a2:	4421      	add	r1, r4
 80097a4:	6011      	str	r1, [r2, #0]
 80097a6:	e7da      	b.n	800975e <_free_r+0x26>
 80097a8:	d902      	bls.n	80097b0 <_free_r+0x78>
 80097aa:	230c      	movs	r3, #12
 80097ac:	6003      	str	r3, [r0, #0]
 80097ae:	e7d6      	b.n	800975e <_free_r+0x26>
 80097b0:	6825      	ldr	r5, [r4, #0]
 80097b2:	1961      	adds	r1, r4, r5
 80097b4:	428b      	cmp	r3, r1
 80097b6:	bf04      	itt	eq
 80097b8:	6819      	ldreq	r1, [r3, #0]
 80097ba:	685b      	ldreq	r3, [r3, #4]
 80097bc:	6063      	str	r3, [r4, #4]
 80097be:	bf04      	itt	eq
 80097c0:	1949      	addeq	r1, r1, r5
 80097c2:	6021      	streq	r1, [r4, #0]
 80097c4:	6054      	str	r4, [r2, #4]
 80097c6:	e7ca      	b.n	800975e <_free_r+0x26>
 80097c8:	b003      	add	sp, #12
 80097ca:	bd30      	pop	{r4, r5, pc}
 80097cc:	2000093c 	.word	0x2000093c

080097d0 <sbrk_aligned>:
 80097d0:	b570      	push	{r4, r5, r6, lr}
 80097d2:	4e0e      	ldr	r6, [pc, #56]	; (800980c <sbrk_aligned+0x3c>)
 80097d4:	460c      	mov	r4, r1
 80097d6:	6831      	ldr	r1, [r6, #0]
 80097d8:	4605      	mov	r5, r0
 80097da:	b911      	cbnz	r1, 80097e2 <sbrk_aligned+0x12>
 80097dc:	f000 f88c 	bl	80098f8 <_sbrk_r>
 80097e0:	6030      	str	r0, [r6, #0]
 80097e2:	4621      	mov	r1, r4
 80097e4:	4628      	mov	r0, r5
 80097e6:	f000 f887 	bl	80098f8 <_sbrk_r>
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	d00a      	beq.n	8009804 <sbrk_aligned+0x34>
 80097ee:	1cc4      	adds	r4, r0, #3
 80097f0:	f024 0403 	bic.w	r4, r4, #3
 80097f4:	42a0      	cmp	r0, r4
 80097f6:	d007      	beq.n	8009808 <sbrk_aligned+0x38>
 80097f8:	1a21      	subs	r1, r4, r0
 80097fa:	4628      	mov	r0, r5
 80097fc:	f000 f87c 	bl	80098f8 <_sbrk_r>
 8009800:	3001      	adds	r0, #1
 8009802:	d101      	bne.n	8009808 <sbrk_aligned+0x38>
 8009804:	f04f 34ff 	mov.w	r4, #4294967295
 8009808:	4620      	mov	r0, r4
 800980a:	bd70      	pop	{r4, r5, r6, pc}
 800980c:	20000940 	.word	0x20000940

08009810 <_malloc_r>:
 8009810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009814:	1ccd      	adds	r5, r1, #3
 8009816:	f025 0503 	bic.w	r5, r5, #3
 800981a:	3508      	adds	r5, #8
 800981c:	2d0c      	cmp	r5, #12
 800981e:	bf38      	it	cc
 8009820:	250c      	movcc	r5, #12
 8009822:	2d00      	cmp	r5, #0
 8009824:	4607      	mov	r7, r0
 8009826:	db01      	blt.n	800982c <_malloc_r+0x1c>
 8009828:	42a9      	cmp	r1, r5
 800982a:	d905      	bls.n	8009838 <_malloc_r+0x28>
 800982c:	230c      	movs	r3, #12
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	2600      	movs	r6, #0
 8009832:	4630      	mov	r0, r6
 8009834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009838:	4e2e      	ldr	r6, [pc, #184]	; (80098f4 <_malloc_r+0xe4>)
 800983a:	f000 f86d 	bl	8009918 <__malloc_lock>
 800983e:	6833      	ldr	r3, [r6, #0]
 8009840:	461c      	mov	r4, r3
 8009842:	bb34      	cbnz	r4, 8009892 <_malloc_r+0x82>
 8009844:	4629      	mov	r1, r5
 8009846:	4638      	mov	r0, r7
 8009848:	f7ff ffc2 	bl	80097d0 <sbrk_aligned>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	4604      	mov	r4, r0
 8009850:	d14d      	bne.n	80098ee <_malloc_r+0xde>
 8009852:	6834      	ldr	r4, [r6, #0]
 8009854:	4626      	mov	r6, r4
 8009856:	2e00      	cmp	r6, #0
 8009858:	d140      	bne.n	80098dc <_malloc_r+0xcc>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	4631      	mov	r1, r6
 800985e:	4638      	mov	r0, r7
 8009860:	eb04 0803 	add.w	r8, r4, r3
 8009864:	f000 f848 	bl	80098f8 <_sbrk_r>
 8009868:	4580      	cmp	r8, r0
 800986a:	d13a      	bne.n	80098e2 <_malloc_r+0xd2>
 800986c:	6821      	ldr	r1, [r4, #0]
 800986e:	3503      	adds	r5, #3
 8009870:	1a6d      	subs	r5, r5, r1
 8009872:	f025 0503 	bic.w	r5, r5, #3
 8009876:	3508      	adds	r5, #8
 8009878:	2d0c      	cmp	r5, #12
 800987a:	bf38      	it	cc
 800987c:	250c      	movcc	r5, #12
 800987e:	4629      	mov	r1, r5
 8009880:	4638      	mov	r0, r7
 8009882:	f7ff ffa5 	bl	80097d0 <sbrk_aligned>
 8009886:	3001      	adds	r0, #1
 8009888:	d02b      	beq.n	80098e2 <_malloc_r+0xd2>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	442b      	add	r3, r5
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	e00e      	b.n	80098b0 <_malloc_r+0xa0>
 8009892:	6822      	ldr	r2, [r4, #0]
 8009894:	1b52      	subs	r2, r2, r5
 8009896:	d41e      	bmi.n	80098d6 <_malloc_r+0xc6>
 8009898:	2a0b      	cmp	r2, #11
 800989a:	d916      	bls.n	80098ca <_malloc_r+0xba>
 800989c:	1961      	adds	r1, r4, r5
 800989e:	42a3      	cmp	r3, r4
 80098a0:	6025      	str	r5, [r4, #0]
 80098a2:	bf18      	it	ne
 80098a4:	6059      	strne	r1, [r3, #4]
 80098a6:	6863      	ldr	r3, [r4, #4]
 80098a8:	bf08      	it	eq
 80098aa:	6031      	streq	r1, [r6, #0]
 80098ac:	5162      	str	r2, [r4, r5]
 80098ae:	604b      	str	r3, [r1, #4]
 80098b0:	4638      	mov	r0, r7
 80098b2:	f104 060b 	add.w	r6, r4, #11
 80098b6:	f000 f835 	bl	8009924 <__malloc_unlock>
 80098ba:	f026 0607 	bic.w	r6, r6, #7
 80098be:	1d23      	adds	r3, r4, #4
 80098c0:	1af2      	subs	r2, r6, r3
 80098c2:	d0b6      	beq.n	8009832 <_malloc_r+0x22>
 80098c4:	1b9b      	subs	r3, r3, r6
 80098c6:	50a3      	str	r3, [r4, r2]
 80098c8:	e7b3      	b.n	8009832 <_malloc_r+0x22>
 80098ca:	6862      	ldr	r2, [r4, #4]
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	bf0c      	ite	eq
 80098d0:	6032      	streq	r2, [r6, #0]
 80098d2:	605a      	strne	r2, [r3, #4]
 80098d4:	e7ec      	b.n	80098b0 <_malloc_r+0xa0>
 80098d6:	4623      	mov	r3, r4
 80098d8:	6864      	ldr	r4, [r4, #4]
 80098da:	e7b2      	b.n	8009842 <_malloc_r+0x32>
 80098dc:	4634      	mov	r4, r6
 80098de:	6876      	ldr	r6, [r6, #4]
 80098e0:	e7b9      	b.n	8009856 <_malloc_r+0x46>
 80098e2:	230c      	movs	r3, #12
 80098e4:	603b      	str	r3, [r7, #0]
 80098e6:	4638      	mov	r0, r7
 80098e8:	f000 f81c 	bl	8009924 <__malloc_unlock>
 80098ec:	e7a1      	b.n	8009832 <_malloc_r+0x22>
 80098ee:	6025      	str	r5, [r4, #0]
 80098f0:	e7de      	b.n	80098b0 <_malloc_r+0xa0>
 80098f2:	bf00      	nop
 80098f4:	2000093c 	.word	0x2000093c

080098f8 <_sbrk_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d06      	ldr	r5, [pc, #24]	; (8009914 <_sbrk_r+0x1c>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	f7f7 fb2a 	bl	8000f5c <_sbrk>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d102      	bne.n	8009912 <_sbrk_r+0x1a>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b103      	cbz	r3, 8009912 <_sbrk_r+0x1a>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	20000944 	.word	0x20000944

08009918 <__malloc_lock>:
 8009918:	4801      	ldr	r0, [pc, #4]	; (8009920 <__malloc_lock+0x8>)
 800991a:	f000 b809 	b.w	8009930 <__retarget_lock_acquire_recursive>
 800991e:	bf00      	nop
 8009920:	20000948 	.word	0x20000948

08009924 <__malloc_unlock>:
 8009924:	4801      	ldr	r0, [pc, #4]	; (800992c <__malloc_unlock+0x8>)
 8009926:	f000 b804 	b.w	8009932 <__retarget_lock_release_recursive>
 800992a:	bf00      	nop
 800992c:	20000948 	.word	0x20000948

08009930 <__retarget_lock_acquire_recursive>:
 8009930:	4770      	bx	lr

08009932 <__retarget_lock_release_recursive>:
 8009932:	4770      	bx	lr

08009934 <_init>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	bf00      	nop
 8009938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993a:	bc08      	pop	{r3}
 800993c:	469e      	mov	lr, r3
 800993e:	4770      	bx	lr

08009940 <_fini>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr
